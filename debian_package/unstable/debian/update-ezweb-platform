#!/usr/bin/python

import sys
import os
import subprocess

import string

import gettext
from gettext import gettext as _

from optparse import OptionParser
from configobj import ConfigObj
from django.core import management

class MainEzWebAdminTool:

  def __init__(self):
    self.resources = EzWebAdminToolResources()

  def call_admin_script(self, admin_script, args):
    arguments  = [admin_script, "--no-backup"]
    arguments += args
    retcode = subprocess.call(arguments, shell=False)
    if retcode != 0:
      sys.stderr.write("  Error\n")
      raise ExternalException()

  def create(self, conf_name):
    newconfig = self.resources.get_site_config(conf_name, True)

    if self.options.server_type != None:
      newconfig['server']['server_type'] = self.options.server_type

    if self.options.connection_type != None:
      newconfig['server']['connection_type'] = self.options.connection_type

    if self.options.database_engine != None:
      newconfig['database']['database_engine'] = self.options.database_engine

    directory = os.path.dirname(self.resources.get_config_file(conf_name))
    self.resources.makedirs(directory)
    self.resources.save_site_config(newconfig)

  def update(self, conf_name):
    site_cfg = self.resources.get_site_config(conf_name)
    enabled = site_cfg.as_bool('enabled')
    change = False

    # Update config
    if self.options.server_type != None:
      change = enabled and site_cfg['server']['server_type'] != self.options.server_type
      if change:
        self.disable(site_cfg)

      site_cfg['server']['server_type'] = self.options.server_type

      if change:
        self.enable(site_cfg, False)

    if self.options.connection_type != None:
      change = True
      site_cfg['server']['connection_type'] = self.options.connection_type

    if self.options.database_engine != None:
      change = True
      site_cfg['database']['database_engine'] = self.options.database_engine

    # Save it
    self.resources.save_site_config(site_cfg, self.options.backup)

    if change:
      self.update_full(site_cfg)

  def update_full(self, site_cfg):
    # Update settings.py
    self.update_settings_py(site_cfg)

    # Update server settings
    if site_cfg['server'].has_key('server_type') and site_cfg['server'].has_key('connection_type'):
      server_type = site_cfg['server']['server_type']
      sys.stderr.write("\n")
      sys.stderr.write("  Updating server settings (using " + server_type + " as server)... \n")
      admin_script = self.resources.get_server_admin_script(server_type)
      self.call_admin_script(admin_script, ["update", site_cfg['name']])
      sys.stderr.write("  Done\n")

    # Update database settings
    if site_cfg['database'].has_key('database_engine'):
      database_engine = site_cfg['database']['database_engine']
      sys.stderr.write("\n")
      sys.stderr.write("  Updating database config (using " + database_engine + " DBMS)... \n")
      admin_script = self.resources.get_dbms_admin_script(database_engine)
      self.call_admin_script(admin_script, ["update", site_cfg['name']])
      sys.stderr.write("  Done\n")

    # Synchronise database
    syspathbackup = sys.path

    sys.stderr.write("\n")
    sys.stderr.write("  Synchronising database...\n")
    sys.path.insert(0, self.resources.SITE_CONFIG_BASE_PATH + site_cfg['name'])
    try:
      management.execute_from_command_line(["django-admin", "syncdb", "--settings=settings"])
    except Exception, e:
      print e

    sys.path = syspathbackup
    sys.stderr.write("  Done\n")

  def update_settings_py(self, site_cfg):
    templatepath = self.resources.get_settings_template()
    templatefile = open(templatepath, "r")
    template = templatefile.read()
    templatefile.close()

    # Fill the template
    template = template.replace("@CONF_NAME@", site_cfg['name'])

    if site_cfg.has_key('admin_user_email') and site_cfg['admin_user_email']:
      template = template.replace("@SERVER_ADMIN_EMAIL@", site_cfg['admin_user_email'])
    else:
      template = template.replace("@SERVER_ADMIN_EMAIL@", self.resources.get_default_admin_email(site_cfg))

    # TODO
    template = template.replace("@PROXY_SERVER@", "")

    filepath = self.resources.get_settings_path(site_cfg['name'])
    if self.options.backup and os.path.exists(filepath):
      sys.stderr.write("  Backing up \"" + filepath + "\"\n")
      os.rename(filepath, filepath + "~")

    sys.stderr.write("  Updating django settings (" + filepath + ")... ")
    file = open(filepath, "w")
    file.write(template)
    file.close()
    sys.stderr.write("Done\n")

  def enable(self, site_cfg, update):
    if not site_cfg['server'].has_key('server_type') or not site_cfg['database'].has_key('database_engine'):
      print "Please, configure this EzWeb instance before enabling it."
      sys.exit(-1)

    admin_script = self.resources.get_server_admin_script(site_cfg['server']['server_type'])
    self.call_admin_script(admin_script, ["enable", site_cfg['name']])
    if update:
      self.update_full(site_cfg)

  def disable(self, site_cfg):
    admin_script = self.resources.get_server_admin_script(site_cfg['server']['server_type'])
    self.call_admin_script(admin_script, ["disable", site_cfg['name']])

  def execute(self):
    parser = OptionParser()
    parser.add_option ("--no-backup","--no-backup", action="store_false",
                       dest="backup", help=_("Do not backup files before modify it."))
    parser.add_option ("--server-type","--server-type", action="store",
                       dest="server_type", help=_("The server type to use with this instance"))
    parser.add_option ("--connection-type","--connection-type", action="store",
                       dest="connection_type", help=_("Connection type to use with to connect this instance to the server"))
    parser.add_option ("--database-engine","--database-engine", action="store",
                       dest="database_engine", help=_("DBMS to use with this instance"))
    parser.add_option ("--debconf","--debconf", action="store_true",
                       dest="debconf", help=_("Use debconf format"))

    (self.options, args) = parser.parse_args()
    if self.options.backup == None:
      self.options.backup = True

    if len(args) < 1:
      parser.print_help()
      sys.exit(-1)

    action = args[0]

    if action == "update":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      self.update(conf_name)
      sys.stderr.write("\n")
      sys.stderr.write("  EzWeb instance updated sucessfully\n")
      #sys.stderr.write("  Restart your $SERVER_TYPE to enable changes.")

    elif action == "enable":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      site_cfg = self.resources.get_site_config(conf_name)
      self.enable(site_cfg, True)

    elif action == "disable":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      site_cfg = self.resources.get_site_config(conf_name)
      self.disable(site_cfg)

    elif action == "getdefaults":
      # TODO
      if cfg.has_key("server_host"):
        print "SERVER_HOST=" + cfg["server_host"]
      else:
        print "SERVER_HOST="

      if cfg.has_key["admin_user"]:
        print "ADMIN_USER=" + cfg["admin_user"]
      else:
        print "ADMIN_USER="

      if cfg.has_key["admin_pass"]:
        print "ADMIN_PASS=" + cfg["admin_pass"]
      else:
        print "ADMIN_PASS="

    elif action == "setdefaults":
      # TODO retreive section name with a better way
      if not global_cfg.has_section(conf_name):
        global_cfg.add_section(conf_name)

      if self.options.server_host != None:
        global_cfg.set(conf_name, "SERVER_HOST", options.server_host)

      if self.options.admin_user != None:
        global_cfg.set(conf_name, "ADMIN_USER", options.admin_user)

      if self.options.admin_pass != None:
        global_cfg.set(conf_name, "ADMIN_PASS", options.admin_pass)

      if self.options.backup and os.path.exists(CFG_FILE):
        os.rename(CFG_FILE, CFG_FILE + "~")

      file = open(CFG_FILE, "w")
      global_cfg.write(file)
      os.chmod(CFG_FILE, 0600)

    elif action == "purge":
      print "Purging"

    elif action == "list":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      root_condition = AndCondition()
      tmp_root = None
      while len(args) >= 2:
        what = args.pop(1)


        if what == "not":
          if len(args) < 2:
            parser.print_help()
            sys.exit(-1)

          tmp_root = root_condition
          what = args.pop(1)
          root_condition = NotCondition()
          tmp_root.append(root_condition)



        if what == "enabled":
          root_condition.append(EnabledCondition(True))

        elif what == "disabled":
          root_condition.append(EnabledCondition(False))

        elif what == "server":
          if len(args) < 2:
            parser.print_help()
            sys.exit(-1)

          server_type = args.pop(1)
          root_condition.append(ServerCondition(server_type))

        elif what == "connection_type":
          if len(args) < 2:
            parser.print_help()
            sys.exit(-1)

          connection_type = args.pop(1)
          root_condition.append(ConnectionTypeCondition(connection_type))

        elif what == "database_engine":
          if len(args) < 2:
            parser.print_help()
            sys.exit(-1)

          database_engine = args.pop(1)
          root_condition.append(DatabaseEngineCondition(database_engine))

        elif what == "all":
          root_condition.append(AllValidCondition())

        else:
          sys.stderr.write ("Unknow search command \"" + what + "\"\n")
          sys.exit(1)

        if tmp_root != None:
          root_condition = tmp_root
          tmp_root = None

      # Look up for the instances that meet the condition
      if self.options.debconf == True:
        first = True
        for subdir, dirs, files in os.walk(EzWebAdminToolResources.SITE_CONFIG_BASE_PATH):
          for d in dirs:
            site_cfg = self.resources.get_site_config(os.path.basename(d))
            if root_condition.pass_check(site_cfg):
              if first == True:
                first = False
                sys.stdout.write(site_cfg['name'])
              else:
                sys.stdout.write(", " + site_cfg['name'])
      else:
        for subdir, dirs, files in os.walk(EzWebAdminToolResources.SITE_CONFIG_BASE_PATH):
          for d in dirs:
            site_cfg = self.resources.get_site_config(os.path.basename(d))
            if root_condition.pass_check(site_cfg):
              print site_cfg['name']



    elif action == "create":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      self.create(conf_name)
    else:
      parser.print_help()

class AndCondition:

  def __init__(self):
    self.conditions = []

  def append(self, condition):
    self.conditions.append(condition)

  def pass_check(self, site_cfg):
    valid = True
    for condition in self.conditions:
      if not condition.pass_check(site_cfg):
        valid = False
        break

    return valid

class NotCondition:

  def append(self, condition):
    self.realcondition = condition

  def pass_check(self, site_cfg):
    return not self.realcondition.pass_check(site_cfg)

class AllValidCondition:
  def pass_check(self, site_cfg):
    return True

class EnabledCondition:

  def __init__(self, compareStatus):
    self.compareStatus = compareStatus

  def pass_check(self, site_cfg):
    return site_cfg.as_bool('enabled') == self.compareStatus

class ServerCondition:

  def __init__(self, compareStatus):
    self.compareStatus = compareStatus

  def pass_check(self, site_cfg):
    if site_cfg['server'].has_key("server_type"):
      return site_cfg['server']['server_type'] == self.compareStatus
    else:
      return self.compareStatus == ""

class ConnectionTypeCondition:

  def __init__(self, compareStatus):
    self.compareStatus = compareStatus

  def pass_check(self, site_cfg):
    if site_cfg['server'].has_key("connection_type"):
      return site_cfg['server']['connection_type'] == self.compareStatus
    else:
      return self.compareStatus == ""

class DatabaseEngineCondition:

  def __init__(self, compareStatus):
    self.compareStatus = compareStatus

  def pass_check(self, site_cfg):
    if site_cfg['database'].has_key("database_engine"):
      return site_cfg['database']['database_engine'] == self.compareStatus
    else:
      return self.compareStatus == ""


class ExternalException(Exception):
  None

if __name__ == "__main__":
  sys.path.append("/usr/share/ezweb-platform")
  from admintools.common import EzWebAdminToolResources, EzWebInstanceNotFound

  admintool = MainEzWebAdminTool()
  try:
    admintool.execute()
  except ExternalException:
    None
  except EzWebInstanceNotFound, e:
    sys.stderr.write("  \"" + e + "\" EzWeb instance not found.\n"
                     "  Please, use '" + sys.argv[0] + " create \"" + e + "\"' before using it")

  sys.exit(0)