# -*- coding: utf-8 -*-

#...............................licence...........................................
#
#     (C) Copyright 2008 Telefonica Investigacion y Desarrollo
#     S.A.Unipersonal (Telefonica I+D)
#
#     This file is part of Morfeo EzWeb Platform.
#
#     Morfeo EzWeb Platform is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Morfeo EzWeb Platform is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with Morfeo EzWeb Platform.  If not, see <http://www.gnu.org/licenses/>.
#
#     Info about members and contributors of the MORFEO project
#     is available at
#
#     http://morfeo-project.org
#
#...............................licence...........................................#


#

import sys
import os
import grp
import shutil

import string
from random import Random

import gettext
from gettext import gettext as _

from configobj import ConfigObj
from optparse import make_option
from django.core import management
from admintools.common import EzWebAdminToolResources, MultiCommandOptionParser, Command, EzWebInstanceNotFound, Argument, ExtendedOption
from admintools.conditions import AndCondition, NotCondition, AllValidCondition, EnabledCondition, NameCondition, ServerCondition, ConnectionTypeCondition, DatabaseEngineCondition, HasAuthMethodCondition, AuthMethodCondition


class MainEzWebAdminTool:

  def __init__(self):
    self.resources = EzWebAdminToolResources()

  def get_default_settings_path(self):
    return self.resources.CONFIG_BASE_PATH + "default.conf"

  def get_default_settings(self):
    filename = self.get_default_settings_path()

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    return cfg

  def save_default_settings(self, cfg, backup = False):
    if backup and os.path.exists(cfg.filename):
      self.resources.printMsg("Backing up \"" + cfg.filename + "\"... ")
      shutil.filecopy(cfg.filename, cfg.filename + "~")
      self.resources.printlnMsgNP("Done")

    cfg.initial_comment  = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    self.resources.printMsg("Saving default EzWeb settings (" + cfg.filename + ")... ")
    cfg.write()
    os.chmod(cfg.filename, 0600)
    self.resources.printlnMsgNP("Done")

  def purgeserver(self, site_cfg, options):
    server_type = site_cfg['server']['server_type']
    server_command = self.resources.get_server_admin_command(server_type, "Purge")
    server_command.execute(site_cfg, options)

  def purgedb(self, site_cfg, options):
    database_engine = site_cfg['database']['database_engine']
    dbms_command = self.resources.get_dbms_admin_command(database_engine, "Purge")
    dbms_command.execute(site_cfg, options)
    site_cfg['database'] = {}

  def purge(self, site_cfg, options):
    database_engine = site_cfg['database']['database_engine']
    server_type = site_cfg['server']['server_type']

    server_command = self.resources.get_server_admin_command(server_type, "Purge")
    dbms_command = self.resources.get_dbms_admin_command(database_engine, "Purge")

    server_command.execute(site_cfg, options)
    dbms_command.execute(site_cfg, options)

    directory = os.path.dirname(self.resources.get_config_file(site_cfg['name']))
    self.resources.rmdir(directory)

  def isEnableable(self, site_cfg):
    enableable = site_cfg['server'].has_key('server_type') and site_cfg['server'].has_key('connection_type') and site_cfg['database'].has_key('database_engine')
    if enableable:
      enableable = site_cfg['server']['server_type'] != "" and site_cfg['server']['connection_type'] != "" and site_cfg['database']['database_engine'] != ""

    if enableable:
      try:
        server_command = self.resources.get_server_admin_command(site_cfg['server']['server_type'], "Process")
        dbms_command = self.resources.get_dbms_admin_command(site_cfg['database']['database_engine'], "Process")
      except:
        enableable = False

    return enableable

  def enable(self, site_cfg, options):
    server_cfg = site_cfg['server']

    options.force_syncdb = True
    site_cfg["enabled"] = True
    self.process_cfg(site_cfg, options)

    # Config saved at process_cfg
    #self.resources.save_site_config(site_cfg, options.backup)

  def process_cfg(self, site_cfg, options):

    if not self.isEnableable(site_cfg):
      return;

    data_dir = os.path.join(self.resources.DATA_PATH, site_cfg['name'])
    self.resources.makedirs(data_dir)
    os.chown(data_dir, -1, grp.getgrnam("www-data").gr_gid)
    os.chmod(data_dir, 0775)

    # Ensure this instance has assigned a secret key
    if not site_cfg.has_key('secret_key') or site_cfg['secret_key'] == "":
      validchars = string.letters + string.digits
      validchars += string.punctuation.replace("'", "")
      site_cfg["secret_key"] = ''.join(Random().sample(validchars, 50))

    # Ensure this instance has a document root
    server_cfg = site_cfg['server']
    if not server_cfg.has_key('document_root') or server_cfg['document_root'] == "":
      newDocumentRoot = self.resources.get_default_document_root(site_cfg['name'])
      self.resources.printlnMsg("Assigning \"" + newDocumentRoot + "\" as document root.")
      server_cfg['document_root'] = newDocumentRoot

    # Update settings.py
    settings_template = self.update_settings_py(site_cfg)

    # Update server settings
    server_type = site_cfg['server']['server_type']
    self.resources.printlnMsg()
    self.resources.printlnMsg("Processing server settings (using " + server_type + " as server)... ")
    self.resources.incPrintNestingLevel()

    server_command = self.resources.get_server_admin_command(server_type, "Process")
    server_command.execute(options, site_cfg, settings_template)
    self.resources.decPrintNestingLevel()
    self.resources.printlnMsg("Done")

    # Update database settings
    database_engine = site_cfg['database']['database_engine']
    self.resources.printlnMsg()
    self.resources.printlnMsg("Processing database config (using " + database_engine + " as DBMS)... ")
    self.resources.incPrintNestingLevel()
    dbms_command = self.resources.get_dbms_admin_command(database_engine, "Process")
    dbms_command.execute(options, site_cfg, settings_template)
    self.resources.decPrintNestingLevel()
    self.resources.printlnMsg("Done")

    # Save django settings
    self.resources.save_django_settings(site_cfg['name'], settings_template)

    # Save EzWeb config
    self.resources.printlnMsg()
    self.resources.save_site_config(site_cfg, options.backup)

    # Synchronise database
    if options.force_syncdb:
      syspathbackup = sys.path

      self.resources.printlnMsg()
      self.resources.printlnMsg("Synchronising database...")
      sys.path.insert(0, self.resources.SITE_CONFIG_BASE_PATH + site_cfg['name'])
      os.environ["DJANGO_SETTINGS_MODULE"] = "settings"
      try:
        if database_engine == "mysql":
          from django.db import connection
          cursor = connection.cursor()
          cursor.execute("SET FOREIGN_KEY_CHECKS = 0");
        management.call_command("syncdb", interactive= False)
        if database_engine == "mysql":
          cursor = connection.cursor()
          cursor.execute("SET FOREIGN_KEY_CHECKS = 1");
      except Exception, e:
        print e

      sys.path = syspathbackup
      self.resources.printlnMsg("Done")

    self.resources.printlnMsg()
    if site_cfg['server']['connection_type'] == 'fastcgi':
      os.system("invoke-rc.d ezweb-platform-fastcgi restart")

    server_command = self.resources.get_server_admin_command(server_type, "Apply")
    server_command.execute(options)

  def update_settings_py(self, site_cfg):
    template = self.resources.get_settings_template()

    # get schema options
    if site_cfg.has_key('schema'):
      schema = site_cfg['schema']
    else:
      schema = "default"

    default_settings = self.get_default_settings()
    if default_settings.has_key(schema):
      schema = default_settings[schema]
    else:
      schema = {}

    # Fill the template

    # Instance name
    template.replace("CONF_NAME", site_cfg['name'])


    # Admin email
    if site_cfg.has_key('admin_user_email') and site_cfg['admin_user_email']:
      template.replace("SERVER_ADMIN_EMAIL", site_cfg['admin_user_email'])
    else:
      template.replace("SERVER_ADMIN_EMAIL", self.resources.get_default_admin_email(site_cfg))


    # Secret key
    template.replace("SECRET_KEY", site_cfg['secret_key'])


    # Log path
    if site_cfg.has_key('log_path') and site_cfg['log_path'] != "":
      log_path = site_cfg['log_path']
    else:
      log_path = self.resources.get_default_log_path(site_cfg['name'])

    template.replace("LOG_PATH", log_path)
    self.resources.makedirs(log_path)
    os.chown(log_path, -1, grp.getgrnam("www-data").gr_gid)
    os.chmod(log_path, 0660)


    # Proxy
    proxy_server = ""
    if site_cfg.has_key("proxy"):
      proxy_server = site_cfg['proxy']
    elif schema.has_key("proxy"):
      proxy_server = schema['proxy']

    if proxy_server == "":
      template.replaceEnableOption("ENABLE_PROXY", False)
    else:
      template.replaceEnableOption("ENABLE_PROXY", True)
      template.replace("PROXY_SERVER", proxy_server)

    # Debug
    if site_cfg.has_key("debug"):
      debug = site_cfg.as_bool("debug")
    elif schema.has_key("debug"):
      debug = schema.as_bool("debug")
    else:
      debug = True
    template.replaceEnableOption("ENABLE_DEBUG", debug)

    # Allow anonymous access
    if site_cfg.has_key("allow_anonymous_access"):
      allow_anonymous_access = site_cfg.as_bool("allow_anonymous_access")
    elif schema.has_key("allow_anonymous_access"):
      allow_anonymous_access = schema.as_bool("allow_anonymous_access")
    else:
      allow_anonymous_access = True

    # Auth backends
    auth_backends = "\n"
    auth_middleware_classes = "\n"
    auth_conf = ""

    if allow_anonymous_access:
      auth_backends += "    'authentication.anonymousaccess.AnonymousBackend',\n"
      auth_middleware_classes += "    'middleware.auth_middleware.AuthenticationMiddleware',\n"
    else:
      auth_middleware_classes += "    'django.contrib.auth.middleware.AuthenticationMiddleware',\n"

    if site_cfg.has_key("auth_methods"):
      auth_methods = site_cfg["auth_methods"]
    elif site_cfg.has_key("auth_methods"):
      auth_methods = schema["auth_methods"]
    else:
      auth_methods = []

    for auth_method in auth_methods:
      auth_method = self.resources.get_auth_method(auth_method)
      backends = auth_method.getBackends()
      for backend in backends:
        auth_backends += "    '" + backend + "',\n"

      auth_conf += auth_method.processConf(site_cfg)

    auth_backends += "    'django.contrib.auth.backends.ModelBackend',\n"

    template.replace("AUTH_BACKENDS", auth_backends)
    template.replace("AUTH_MIDDLEWARE_CLASSES", auth_middleware_classes)

    template.replace("AUTH_BACKENDS_CONF", auth_conf)

    return template


  class UpdateCommand(Command):
    option_list = [make_option("--server-type", action="store",
                               dest="server_type", help=_("The server type to use with this instance")),
                   make_option("--connection-type", action="store",
                               dest="connection_type", help=_("Connection type to use with to connect this instance to the server")),
                   make_option("--database-engine", action="store",
                               dest="database_engine", help=_("DBMS to use with this instance")),
                   make_option("--schema", action="store",
                               dest="schema", help=_("The schema to use for the general configuration")),
                   make_option("--server-schema", action="store",
                               dest="server_schema", help=_("The schema to use for the server configuration")),
                   make_option("--database-schema", action="store",
                               dest="database_schema", help=_("The schema to use for the database configuration")),
#                   make_option("--auth-schema", action="store",
#                               dest="auth-schema", help=_("The schema to use for the auth configuration")),
                   ExtendedOption("--auth-methods", action="store_list",
                                  dest="auth_methods", help=_("Auth methods use with this instance")),
                   make_option("-a", "--allow-anonymous-access", action="store",
                               dest="allow_anonymous_access", help=_("Allow/Deny anonymous users in this instance")),
                   make_option("-d", "--debug-mode", action="store",
                               dest="debug", help=_("Enables/Disables the debug mode")),
                   make_option("--proxy", action="store",
                               dest="proxy", help=_("The proxy to use")),
                   make_option("--force-syncdb", action="store_true",
                               dest="force_syncdb", help=_("Force a syncdb operation (only if the instance is already enabled)"), default=False),
                  ]

    args = [Argument("conf_name", _("Name of the configuration to update."))]
    final = False

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) < 1:
        return -1

      conf_name = args[0]
      site_cfg = self.resources.get_site_config(conf_name)
      reenable = False
      changed = False # TODO not used yet
      enabled = site_cfg.as_bool('enabled')

      self.resources.printlnMsg()
      self.resources.printlnMsg("Updating \"%s\" instance" % conf_name)
      self.resources.printlnMsg()
      self.resources.incPrintNestingLevel()

      # Update general config
      self.resources.printlnMsg("Updating general config... ")
      self.resources.incPrintNestingLevel()

      # Server type
      if site_cfg['server'].has_key("server_type"):
        server_type = site_cfg['server']['server_type']
      else:
        server_type = None

      if options.server_type != None and server_type != options.server_type:
        changed = True
        if enabled:
          self.admintool.purgeserver(site_cfg, options)
          reenable = True

        self.resources.printlnMsg("Assigning \"%s\" as server for this instance." % options.server_type)
        site_cfg['server']['server_type'] = options.server_type
        server_type = options.server_type

      # Connection type
      if options.connection_type != None:
        changed = True
        self.resources.printlnMsg("Using \"%s\" for connecting with the server." % options.connection_type)
        site_cfg['server']['connection_type'] = options.connection_type

      # Database engine
      if site_cfg['database'].has_key("database_engine"):
        database_engine = site_cfg['database']['database_engine']
      else:
        database_engine = None

      if options.database_engine != None and database_engine != options.database_engine:
        changed = True
        if enabled:
          self.admintool.purgedb(site_cfg, options)
          reenable = True
          options.force_syncdb = True

        self.resources.printlnMsg("Assigning \"%s\" as dbms for this instance." % options.database_engine)
        site_cfg['database']['database_engine'] = options.database_engine
        database_engine = options.database_engine

      # Auth methods
      if site_cfg.has_key("auth_methods"):
        auth_methods = site_cfg["auth_methods"]
      else:
        auth_methods = []

      if options.auth_methods != None and auth_methods != options.auth_methods:
        changed = True
        self.resources.printlnMsg("Using \"%s\" as auth methods for this instance." % options.auth_methods)
        site_cfg['auth_methods'] = options.auth_methods
        auth_methods = options.auth_methods

      # Proxy
      if options.proxy != None:
        changed = True
        self.resources.printlnMsg("Assigning \"%s\" as Proxy for this instance." % options.proxy)
        site_cfg['proxy'] = options.proxy

      # Allow anonymous access
      if options.allow_anonymous_access != None:
        changed = True
        a = options.allow_anonymous_access
        if a == "True" or a == "true" or a == "1":
          self.resources.printlnMsg("Enabling anonymous accesses to this instance.")
          site_cfg['allow_anonymous_access'] = True
        else:
          self.resources.printlnMsg("Disabling anonymous accesses to this instance.")
          site_cfg['allow_anonymous_access'] = False

      # Debug mode
      if options.debug != None:
        changed = True
        a = options.debug
        if a == "True" or a == "true" or a == "1":
          self.resources.printlnMsg("Configuring this instance in debug mode.")
          site_cfg['debug'] = True
        else:
          self.resources.printlnMsg("Configuring this instance in normal mode (debug=off).")
          site_cfg['debug'] = False

      # general schema
      if options.schema != None:
        if options.server_schema == "":
          options.server_schema = "default"

        if not site_cfg.has_key('schema') or options.schema != site_cfg['schema']:
          changed = True
          self.resources.printlnMsg("Using \"%s\" as schema for the general settings." % options.schema)
          site_cfg['schema'] = options.schema

      # server schema
      if options.server_schema != None:
        if options.server_schema == "":
          options.server_schema = "default"

        if not site_cfg['server'].has_key('schema') or options.server_schema != site_cfg['server']['schema']:
          changed = True
          self.resources.printlnMsg("Using \"%s\" as schema for the server settings." % options.server_schema)
          site_cfg['server']['schema'] = options.server_schema

      # database schema
      if options.database_schema != None:
        if options.database_schema == "":
          options.database_schema = "default"

        if not site_cfg['database'].has_key('schema') or options.server_schema != site_cfg['database']['schema']:
          changed = True
          self.resources.printlnMsg("Using \"%s\" as schema for the database settings." % options.database_schema)
          site_cfg['database']['schema'] = options.database_schema

      self.resources.decPrintNestingLevel()
      self.resources.printlnMsg("Done")
      self.resources.printlnMsg()

      # Specific server & datatabase option updating
      update_server = server_type != None and server_type != ""
      update_database = database_engine != None and database_engine != ""

      if len(auth_methods) > 0:
        for auth_method in auth_methods:
          auth_command = self.resources.get_auth_admin_command(auth_method, "Update")
          parser.add_options(auth_command.option_list)

      if update_server:
        server_command = self.resources.get_server_admin_command(server_type, "Update")
        parser.add_options(server_command.option_list)

      if update_database:
        dbms_command = self.resources.get_dbms_admin_command(database_engine, "Update")
        parser.add_options(dbms_command.option_list)

      # Check command line args
      parser.parse_args(False)

      if len(auth_methods) > 0:
        for auth_method in auth_methods:
          self.resources.printMsg("Updating auth backend config (%s)... " % auth_method)
          auth_command = self.resources.get_auth_admin_command(auth_method, "Update")
          auth_command.execute(site_cfg, parser.get_current_options())
          self.resources.printlnMsgNP("Done")

      if update_server:
        self.resources.printMsg("Updating server config (%s)... " % server_type)
        server_command.execute(site_cfg, parser.get_current_options())
        self.resources.printlnMsgNP("Done")

      if update_database:
        self.resources.printMsg("Updating database config (%s)... " % database_engine)
        dbms_command.execute(site_cfg, parser.get_current_options())
        self.resources.printlnMsgNP("Done")

      if reenable:
        self.admintool.enable(site_cfg, options)
      elif enabled:
        self.admintool.process_cfg(site_cfg, options)
      elif site_cfg.has_key("schedule_enable") and site_cfg.as_bool("schedule_enable") and self.admintool.isEnableable(site_cfg):
        del site_cfg["schedule_enable"]
        self.admintool.enable(site_cfg, options)
      else:
        # EzWeb config is saved only if enable or process_cfg is called
        self.resources.save_site_config(site_cfg, options.backup)

      self.resources.decPrintNestingLevel()
      self.resources.printlnMsg()
      self.resources.printlnMsg("EzWeb instance updated sucessfully.")


  class EnableCommand(Command):
    option_list = [make_option("-f", "--force", action="store_true", default=False,
                               dest="force", help=_("Force enabling the instance")),
                   make_option("-s", "--schedule", action="store_true", default=False,
                               dest="schedule", help=_("Schedule the enabling of this instance")),]
    args = [Argument("conf_name", _("Name of the configuration to enable."))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) < 1:
        return -1

      conf_name = args[0]
      site_cfg = self.resources.get_site_config(conf_name)

      enableable = self.admintool.isEnableable(site_cfg)

      if options.schedule and not enableable:
        self.resources.printlnMsg("Scheduling the enabling of the \"%s\" EzWeb instance..." % site_cfg['name'])
        self.resources.incPrintNestingLevel()

        site_cfg['schedule_enable'] = True
        self.resources.save_site_config(site_cfg, options.backup)

        self.resources.decPrintNestingLevel()
        self.resources.printlnMsg("Done")
        return

      elif not options.schedule and not enableable:
        print "Please, configure this EzWeb instance before enabling it."
        sys.exit(-1)

      self.resources.printlnMsg()
      if not site_cfg.as_bool("enabled") or options.force:
        self.resources.printlnMsg("Enabling \"%s\" EzWeb instance..." % site_cfg['name'])
        self.resources.incPrintNestingLevel()

        self.admintool.enable(site_cfg, options)

        self.resources.decPrintNestingLevel()
        self.resources.printlnMsg("Done")
      else:
        self.resources.printlnMsg("\"%s\" EzWeb instance is not going to be enabled as it is already enabled." % site_cfg['name'])


  class DisableCommand(Command):
    option_list = []
    args = [Argument("conf_name", _("Name of the configuration to disable."))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) < 1:
        return -1

      conf_name = args[0]
      site_cfg = self.resources.get_site_config(conf_name)

      self.resources.printlnMsg()
      if site_cfg.as_bool("enabled"):
        self.resources.printlnMsg("Disabling \"%s\" EzWeb instance..." % site_cfg['name'])
        self.resources.incPrintNestingLevel()

        site_cfg["enabled"] = False
        site_cfg["schedule_enabled"] = False
        self.resources.save_site_config(site_cfg, options.backup)

        self.resources.printlnMsg("Disabling %s server instance... " % site_cfg['name'])
        self.admintool.purgeserver(site_cfg, options)
        self.resources.printlnMsg("Done")

        self.resources.printlnMsg()
        if site_cfg['server']['connection_type'] == 'fastcgi':
          os.system("invoke-rc.d ezweb-platform-fastcgi restart")

        server_command = self.resources.get_server_admin_command(site_cfg['server']['server_type'], "Apply")
        server_command.execute(options)

        self.resources.decPrintNestingLevel()
        self.resources.printlnMsg("Done")
      elif site_cfg.has_key("schedule_enable") and site_cfg.as_bool('schedule_enable'):
        self.resources.printlnMsg("Aborting planed activation of the \"%s\" EzWeb instance..." % site_cfg['name'])
        self.resources.incPrintNestingLevel()

        site_cfg["schedule_enabled"] = False
        self.resources.save_site_config(site_cfg, options.backup)

        self.resources.decPrintNestingLevel()
        self.resources.printlnMsg("Done")
      else:
        self.resources.printlnMsg("\"%s\" EzWeb instance is not going to be disabled as it is already disabled." % site_cfg['name'])

  class CleanCommand(Command):
    option_list = []
    args = [Argument("conf_name", _("Name of the configuration to clean."))]

    final = False

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) < 1:
        return -1

      conf_name = args[0]

      self.resources.printlnMsg()
      self.resources.printlnMsg("Cleaning \"%s\" instance" % conf_name)
      self.resources.printlnMsg()
      self.resources.incPrintNestingLevel()

      site_cfg = self.resources.get_site_config(conf_name)

      if site_cfg['server'].has_key("server_type"):
        server_type = site_cfg['server']['server_type']
      else:
        server_type = None

      if site_cfg['database'].has_key("database_engine"):
        database_engine = site_cfg['database']['database_engine']
      else:
        database_engine = None

      clean_server = server_type != None and server_type != ""
      clean_database = database_engine != None and database_engine != ""

      if clean_server:
        self.resources.printlnMsg("Cleaning server resources (%s)... " % server_type)
        self.resources.incPrintNestingLevel()
        server_command = self.resources.get_server_admin_command(server_type, "Purge")
        server_command.execute(site_cfg, options)
        self.resources.decPrintNestingLevel()
        self.resources.printlnMsg("Done")

      if clean_database:
        self.resources.printlnMsg("Cleaning database resources (%s)... " % database_engine)
        self.resources.incPrintNestingLevel()
        dbms_command = self.resources.get_dbms_admin_command(database_engine, "Clean")
        dbms_command.execute(site_cfg, parser.get_current_options())
        self.resources.decPrintNestingLevel()
        self.resources.printlnMsg("Done")

      if site_cfg.as_bool('enabled'):
        options.force_syncdb = True
        self.admintool.process_cfg(site_cfg, options)

      self.resources.decPrintNestingLevel()
      self.resources.printlnMsg()
      self.resources.printlnMsg("Done")
      self.resources.printlnMsg()

  class PurgeCommand(Command):
    option_list = []
    args = [Argument("conf_name", _("Name of the configuration to purge."))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) != 1:
        return -1

      conf_name = args[0]
      site_cfg = self.resources.get_site_config(conf_name)

      self.resources.printlnMsg()
      self.resources.printlnMsg("Purging \"%s\" EzWeb instance..." % site_cfg['name'])
      self.resources.incPrintNestingLevel()

      self.admintool.purge(site_cfg, options)

      self.resources.decPrintNestingLevel()
      self.resources.printlnMsg("Done")

  class ListCommand(Command):

    option_list = [make_option("--debconf", action="store_true",
                               dest="debconf", help=_("Use plain output format"))
                  ]
    args_help = "condition [value] [condition [value]]*"
    args = [Argument("condition", "all, enabled, disabled, server+, connection_type+, database_engine+, name+."),
            Argument("value", "Value used to check the condition.")]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) < 1:
        return -1

      root_condition = AndCondition()
      tmp_root = None
      while len(args) > 0:
        what = args.pop(0)

        if what == "not":
          if len(args) < 1:
            return -1

          tmp_root = root_condition
          what = args.pop(0)
          root_condition = NotCondition()
          tmp_root.append(root_condition)

        if what == "enabled":
          root_condition.append(EnabledCondition(True))

        elif what == "disabled":
          root_condition.append(EnabledCondition(False))

        elif what == "auth_method":
          if len(args) < 1:
            return -1

          auth_method = args.pop(0)
          root_condition.append(HasAuthMethodCondition(auth_method))

        elif what == "no_auth_method":
          root_condition.append(AuthMethodCondition(""))

        elif what == "server":
          if len(args) < 1:
            return -1

          server_type = args.pop(0)
          root_condition.append(ServerCondition(server_type))

        elif what == "connection_type":
          if len(args) < 1:
            return -1

          connection_type = args.pop(0)
          root_condition.append(ConnectionTypeCondition(connection_type))

        elif what == "database_engine":
          if len(args) < 1:
            return -1

          database_engine = args.pop(0)
          root_condition.append(DatabaseEngineCondition(database_engine))

        elif what == "all":
          root_condition.append(AllValidCondition())

        elif what == "name":
          if len(args) < 1:
            return -1

          name = args.pop(0)
          root_condition.append(NameCondition(name))

        else:
          self.resources.printlnMsg("Unknow search command \"%(cmd)s\"" % {"cmd": what})
          sys.exit(1)

        if tmp_root != None:
          root_condition = tmp_root
          tmp_root = None

      # Look up for the instances that meet the condition
      if options.debconf == True:
        first = True
        for subdir, dirs, files in os.walk(EzWebAdminToolResources.SITE_CONFIG_BASE_PATH):
          for d in dirs:
            try:
              site_cfg = self.resources.get_site_config(os.path.basename(d))
            except:
              continue

            if root_condition.pass_check(site_cfg):
              if first == True:
                first = False
                sys.stdout.write(site_cfg['name'])
              else:
                sys.stdout.write(", " + site_cfg['name'])
      else:
        for subdir, dirs, files in os.walk(EzWebAdminToolResources.SITE_CONFIG_BASE_PATH):
          for d in dirs:
            try:
              site_cfg = self.resources.get_site_config(os.path.basename(d))
            except:
              continue

            if root_condition.pass_check(site_cfg):
              print site_cfg['name']

  class ListServersCommand(Command):
    option_list = [make_option("--full", action="store_true",
                               dest="full", help=_("List available servers with their corresponding connection types."))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 0:
        return -1

      for subdir, dirs, files in os.walk(EzWebAdminToolResources.SERVER_ADMIN_SCRIPTS_PATH):
        for script in files:
          (server_type, ext) = os.path.splitext(script)
          if server_type == "__init__" or ext != ".py":
            continue

          if options.full:
            try:
              command = self.resources.get_server_admin_command(server_type, "ListTypes")
              command.execute(True);
            except:
              pass # Ignore errors
          else:
            print server_type

  class ListServerConnectionsCommand(Command):
    option_list = []
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) != 1:
        return -1

      server_type = args[0]
      command = self.resources.get_server_admin_command(server_type, "ListTypes")
      command.execute(False);

  class ListDBMSsCommand(Command):
    option_list = []
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 0:
        return -1

      for subdir, dirs, files in os.walk(EzWebAdminToolResources.DB_ADMIN_SCRIPTS_PATH):
        for script in files:
          (dbms, ext) = os.path.splitext(script)
          if dbms == "__init__" or ext != ".py":
            continue

          print dbms

  class ListAuthMethodsCommand(Command):
    option_list = []
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 0:
        return -1

      for subdir, dirs, files in os.walk(EzWebAdminToolResources.DB_AUTH_SCRIPTS_PATH):
        for script in files:
          (auth_method, ext) = os.path.splitext(script)
          if auth_method == "__init__" or ext != ".py":
            continue

          print auth_method

  class SetDefaultsCommand(Command):
    option_list = [make_option("--proxy", action="store",
                               dest="proxy", help=_("The default proxy to use")),
                   make_option("-a", "--allow-anonymous-access", action="store",
                               dest="allow_anonymous_access", help=_("Allow/Disallows anonymous accesses by default")),
                   make_option("-d", "--debug-mode", action="store",
                               dest="debug", help=_("Enables/Disables the debug mode")),
                  ]
    args_help = "[schema]"
    args = [Argument("schema", _("Name of the schema to configure. (default: \"default\")"))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 1:
        return -1
      elif len(args) == 0:
        schema_name = "default"
      else:
        schema_name = args[0]

      schema_settings = self.admintool.get_default_settings()

      if schema_settings.has_key(schema_name):
        cfg = schema_settings[schema_name]
      else:
        schema_settings[schema_name] = {}
        cfg = schema_settings[schema_name]

      # Proxy
      if options.proxy != None:
        cfg["proxy"] = options.proxy

      # Allow Anonymous Accesses
      if options.allow_anonymous_access != None:
        cfg["allow_anonymous_access"] = options.allow_anonymous_access

      # Debug mode
      if options.debug != None:
        cfg["debug"] = options.debug

      self.admintool.save_default_settings(schema_settings)

  class GetDefaultsCommand(Command):
    option_list = []
    args_help = "[schema]"
    args = [Argument("schema", _("Name of the schema to read. (default: \"default\")"))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 1:
        return -1
      elif len(args) == 0:
        schema_name = "default"
      else:
        schema_name = args[0]

      schema_name = args[0]
      schema_settings = self.admintool.get_default_settings()

      if schema_settings.has_key(schema_name):
        cfg = schema_settings[schema_name]
      else:
        cfg = {}

      # Proxy
      if cfg.has_key("proxy"):
        print "PROXY=" + cfg["proxy"]
      else:
        print "PROXY="

      # Allow Anonymous
      if cfg.has_key("allow_anonymous_access"):
        if cfg["allow_anonymous_access"]:
          value = "true"
        else:
          value = "false"

        print "ALLOW_ANONYMOUS_ACCESS=" + value
      else:
        print "ALLOW_ANONYMOUS_ACCESS=true"

      # Debug
      if cfg.has_key("debug"):
        if cfg["debug"]:
          value = "true"
        else:
          value = "false"

        print "DEBUG_MODE=" + value
      else:
        print "DEBUG_MODE=true"

  class GetDBMSDefaultsCommand(Command):
    option_list = []
    args_help = "<dbms> [schema]"
    args = [Argument("dbms", _("DBMS to configure")),
            Argument("schema", _("Name of the schema to configure. (default: \"default\")"))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 2 or len(args) < 1:
        return -1
      elif len(args) == 1:
        schema_name = "default"
      else:
        schema_name = args[1]

      dbms = args[0]
      command = self.resources.get_dbms_admin_command(dbms, "GetDefaults")
      command.execute(schema_name, options);

  class SetDBMSDefaultsCommand(Command):
    option_list = []
    args_help = "<dbms> [schema]"
    args = [Argument("dbms", _("DBMS to configure")),
            Argument("schema", _("Name of the schema to configure. (default: \"default\")"))]
    final = False

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 2 or len(args) < 1:
        return -1
      elif len(args) == 1:
        schema_name = "default"
      else:
        schema_name = args[1]

      dbms = args[0]
      command = self.resources.get_dbms_admin_command(dbms, "SetDefaults")
      # add options of the real command
      parser.add_options(command.option_list)
      parser.parse_args(False)
      command.execute(schema_name, parser.get_current_options());

  class GetServerDefaultsCommand(Command):
    option_list = []
    args_help = "<server> [schema]"
    args = [Argument("server", _("Server to retreive the config from.")),
            Argument("schema", _("Name of the schema to read. (default: \"default\")"))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 2 or len(args) < 1:
        return -1
      elif len(args) == 1:
        schema_name = "default"
      else:
        schema_name = args[1]

      server = args[0]
      command = self.resources.get_server_admin_command(server, "GetDefaults")
      command.execute(schema_name, options);

  class SetServerDefaultsCommand(Command):
    option_list = []
    args_help = "<server> [schema]"
    args = [Argument("server", _("Server to configure.")),
            Argument("schema", _("Name of the schema to configure. (default: \"default\")"))]
    final = False

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 2 or len(args) < 1:
        return -1
      elif len(args) == 1:
        schema_name = "default"
      else:
        schema_name = args[1]

      server = args[0]
      command = self.resources.get_server_admin_command(server, "SetDefaults")
      # add options of the real command
      parser.add_options(command.option_list)
      parser.parse_args(False)
      command.execute(schema_name, parser.get_current_options());

  class GetAuthDefaultsCommand(Command):
    option_list = []
    args_help = "<auth_method> [schema]"
    args = [Argument("auth_method", _("Auth method to retreive the config info from.")),
            Argument("schema", _("Name of the schema to read. (default: \"default\")"))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 2 or len(args) < 1:
        return -1
      elif len(args) == 1:
        schema_name = "default"
      else:
        schema_name = args[1]

      auth_method = args[0]
      command = self.resources.get_auth_admin_command(auth_method, "GetDefaults")
      command.execute(schema_name, options);

  class SetAuthDefaultsCommand(Command):
    option_list = []
    args_help = "<auth_method> [schema]"
    args = [Argument("auth_method", _("Auth method to retreive the config info from.")),
            Argument("schema", _("Name of the schema to configure. (default: \"default\")"))]
    final = False

    def __init__(self, resources, admintool):
      self.resources = resources
      self.admintool = admintool

    def execute(self, parser, options, args):
      if len(args) > 2 or len(args) < 1:
        return -1
      elif len(args) == 1:
        schema_name = "default"
      else:
        schema_name = args[1]

      auth_method = args[0]
      command = self.resources.get_auth_admin_command(auth_method, "SetDefaults")
      # add options of the real command
      parser.add_options(command.option_list)
      parser.parse_args(False)
      command.execute(schema_name, parser.get_current_options());

  class CreateCommand(Command):
    option_list = []
    args = [Argument("conf_name", _("Name for the new configuration."))]
    final = True

    def __init__(self, resources, admintool):
      self.resources = resources

    def execute(self, parser, options, args):
      if len(args) < 1:
        return -1

      conf_name = args[0]
      try:
        newconfig = self.resources.get_site_config(conf_name, True)
      except Exception, e:
        self.resources.printlnMsg(unicode(e))
        return -2

      directory = os.path.dirname(self.resources.get_config_file(conf_name))
      self.resources.makedirs(directory)
      self.resources.save_site_config(newconfig)

  def execute(self):

    try:
      os.SEEK_SET
    except AttributeError:
      os.SEEK_SET, os.SEEK_CUR, os.SEEK_END = range(3)

    option_list = [make_option("--no-backup", action="store_false",
                               dest="backup", default=True, help=_("Do not backup files before modify it."))
                  ]
    parser = MultiCommandOptionParser(option_list = option_list)

    parser.add_command("create", self.CreateCommand(self.resources, self))
    parser.add_command("update", self.UpdateCommand(self.resources, self))
    parser.add_command("enable", self.EnableCommand(self.resources, self))
    parser.add_command("clean", self.CleanCommand(self.resources, self))
    parser.add_command("purge", self.PurgeCommand(self.resources, self))
    parser.add_command("disable", self.DisableCommand(self.resources, self))
    parser.add_command("list", self.ListCommand(self.resources, self))
    parser.add_command("listservers", self.ListServersCommand(self.resources, self))
    parser.add_command("listconnections", self.ListServerConnectionsCommand(self.resources, self))
    parser.add_command("listdbmss", self.ListDBMSsCommand(self.resources, self))
    parser.add_command("listauthmethods", self.ListAuthMethodsCommand(self.resources, self))
    parser.add_command("getdbmsdefaults", self.GetDBMSDefaultsCommand(self.resources, self))
    parser.add_command("setdbmsdefaults", self.SetDBMSDefaultsCommand(self.resources, self))
    parser.add_command("getserverdefaults", self.GetServerDefaultsCommand(self.resources, self))
    parser.add_command("setserverdefaults", self.SetServerDefaultsCommand(self.resources, self))
    parser.add_command("getauthdefaults", self.GetAuthDefaultsCommand(self.resources, self))
    parser.add_command("setauthdefaults", self.SetAuthDefaultsCommand(self.resources, self))
    parser.add_command("getdefaults", self.GetDefaultsCommand(self.resources, self))
    parser.add_command("setdefaults", self.SetDefaultsCommand(self.resources, self))

    try:
      parser.exec_command()
    except ExternalException:
      None
    except EzWebInstanceNotFound, e:
      info = {"iname": unicode(e), "command": sys.argv[0]}
      self.resources.printlnMsg()
      self.resources.printlnMsg("\"%(iname)s\" EzWeb instance not found." % info)
      self.resources.printlnMsg("Please, use '%(command)s create \"%(iname)s\"' before using it." % info)

    return 0


class ExternalException(Exception):
  None

