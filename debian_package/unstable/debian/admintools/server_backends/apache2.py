import sys
import os
import re
import shutil

import string
from random import Random

import gettext
from gettext import gettext as _

from admintools.common import Template, Command, EzWebAdminToolResources
from optparse import OptionParser, make_option
from configobj import ConfigObj


class Apache2Resources:

  TEMPLATES_PATH           = "/etc/ezweb-platform/apache2-templates/"
  AVAILABLE_SITE_BASE_PATH = "/etc/apache2/sites-available/"
  ENABLED_SITE_BASE_PATH   = "/etc/apache2/sites-enabled/"
  DEFAULT_LOG_BASE_PATH    = "/var/log/apache2/"

  def __init__(self, resources):
    self.resources = resources

  def get_available_link_path(self, conf_name):
    return self.AVAILABLE_SITE_BASE_PATH + "ezweb-platform-" + conf_name

  def get_enabled_link_path(self, conf_name):
    return self.ENABLED_SITE_BASE_PATH + "ezweb-platform-" + conf_name

  def get_vhost_template(self, connection_type):
    return self.TEMPLATES_PATH + connection_type + ".vhost"

  def get_vhost_path(self, conf_name):
    return self.resources.SITE_CONFIG_BASE_PATH + conf_name + "/apache2.vhost"

  def get_log_path(self, conf_name):
    return self.DEFAULT_LOG_BASE_PATH + "ezweb-platform-" + conf_name

  def get_apache2_settings(self):
    filename = self.resources.CONFIG_BASE_PATH + "apache2.conf"

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    if not cfg.has_key("default"):
      cfg["default"] = {}

    if not isinstance(cfg['default'], dict):
      raise Exception() # TODO

    return cfg


  def save_apache2_settings(self, cfg, backup = False):
    if backup and os.path.exists(cfg.filename):
      self.resources.printMsg("Backing up \"%s\"... " % cfg.filename)
      shutil.copyfile(cfg.filename, cfg.filename + "~")
      self.resources.printlnMsgNP("Done")

    cfg.initial_comment = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    self.resources.printMsg("Saving EzWeb Apache2 settings (%s)... " % cfg.filename)
    cfg.write()
    os.chmod(cfg.filename, 0600)
    self.resources.printlnMsg("Done")

  def update_vhost(self, cfg, backup):
    templatepath = self.get_vhost_template(cfg['server']['connection_type'])
    try:
      templatefile = open(templatepath, "r")
    except IOError, e:
      if e.errno == 2:
        self.resources.printlnMsg("Unknow connection method \"" + cfg['server']['connection_type'] + "\". May be you need to install support for it.")
        sys.exit(1)
      else:
        raise e

    template = templatefile.read()
    templatefile.close()
    template = Template(template)

    apache2_settings = self.get_apache2_settings()
    schema_cfg = apache2_settings['default']
    server_cfg = cfg['server']

    # Fill the template
    template.replace("CONF_NAME", cfg['name'])
    template.replace("DOCUMENT_ROOT", server_cfg['document_root'])

    if server_cfg.has_key('server_name') and server_cfg['server_name'] != "":
      servername = server_cfg['server_name']
    elif schema_cfg.has_key('server_name') and schema_cfg['server_name'] != "":
      servername = schema_cfg['server_name']
    else:
      servername = "localhost"

    if server_cfg.has_key('port') and server_cfg['port'] != "":
      port = server_cfg['port']
    elif schema_cfg.has_key('server_port') and schema_cfg['server_port'] != "":
      port = schema_cfg['server_port']
    else:
      port = "8000"

    template.replace("SERVER_NAME", servername)
    template.replace(":PORT", ":" + port) # TODO read config to know whether to use ports

    if server_cfg.has_key('admin_user_email') and server_cfg['admin_user_email']:
      template.replace("SERVER_ADMIN_EMAIL", server_cfg['admin_user_email'])
    else:
      template.replace("SERVER_ADMIN_EMAIL", self.resources.get_default_admin_email(cfg))

    log_path = self.get_log_path(cfg['name'])
    template.replace("LOG_BASE_PATH", log_path)

    filepath = self.get_vhost_path(cfg['name'])
    self.resources.printMsg("Updating apache2 vhost (" + filepath + ")... ")
    template.save(filepath)
    self.resources.printlnMsgNP("Done")

    # enable the port in the apache2 config if needed
    portspath = "/etc/apache2/ports.conf"
    if os.path.exists(portspath):
      portsfile = open(portspath, "r")
      portscontent = portsfile.read()
      portsfile.close()

      if not re.search("Listen\s+" + port, portscontent):
        if backup:
          self.resources.printMsg("Backing up \"%s\"... " % portspath)
          shutil.copyfile(portspath, portspath + "~")
          self.resources.printlnMsgNP("Done")

        portsfile = open(portspath, "a")
        self.resources.printMsg("Enabling port %s on apache2... " % port)
        portsfile.write("\n# Added by EzWeb admin tools\nListen " + port)
        portsfile.close()
        self.resources.printlnMsgNP("Done")



class UpdateCommand(Command):
  option_list = [make_option("--server-name","--server-name", action="store",
                             dest="server_name", help=_("Try to run a dist-upgrade")),
                 make_option("--server-port","--server-port", action="store",
                             dest="server_port", help=_("Try to run a dist-upgrade")),
                 make_option("--document-root","--document-root", action="store",
                             dest="document_root", help=_("Try to run a dist-upgrade"))
                ]

  def __init__(self, resources):
    self.apache2Resources = Apache2Resources(resources)
    self.resources = resources

  def execute(self, options, site_cfg):
    server_cfg = site_cfg['server']

    if options.document_root != None:
      server_cfg["document_root"] = options.document_root

    if options.server_name != None:
      server_cfg["name"] = options.server_name

    if options.server_port != None:
      server_cfg["port"] = options.server_port

class ProcessCommand(Command):
  def __init__(self, resources):
    self.apache2Resources = Apache2Resources(resources)
    self.resources = resources

  def execute(self, options, site_cfg, settings_template):

    server_cfg = site_cfg['server']
    conf_name = site_cfg['name']

    if server_cfg.has_key('document_root') or server_cfg['document_root'] == "":
      server_cfg['document_root'] = self.resources.get_default_document_root(conf_name)

    # assign and create a document root if needed
    if not server_cfg.has_key('document_root') or server_cfg['document_root'] == "":
      newDocumentRoot = self.resources.get_default_document_root(conf_name)
      self.resources.printlnMsg("Assigning \"" + newDocumentRoot + "\" as document root for \"" + conf_name + "\"")
      server_cfg['document_root'] = newDocumentRoot

    self.resources.makedirs(server_cfg['document_root'])

    # create the log path if needed
    self.resources.makedirs(self.apache2Resources.get_log_path(conf_name))

    self.apache2Resources.update_vhost(site_cfg, options.backup)

    # vhost links
    self.resources.link(self.apache2Resources.get_vhost_path(conf_name),
                        self.apache2Resources.get_available_link_path(conf_name))
    self.resources.link(self.apache2Resources.get_available_link_path(conf_name),
                        self.apache2Resources.get_enabled_link_path(conf_name))


class PurgeCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.apache2Resources = Apache2Resources(resources)
    self.resources = resources

  def execute(self, site_cfg, options):
    conf_name = site_cfg['name']
    filepath = self.apache2Resources.get_vhost_path(conf_name)
    try:
      os.remove(filepath)
    except:
      pass

    # unlink vhost files
    self.resources.unlink(self.apache2Resources.get_vhost_path(conf_name),
                          self.apache2Resources.get_available_link_path(conf_name))
    self.resources.unlink(self.apache2Resources.get_available_link_path(conf_name),
                          self.apache2Resources.get_enabled_link_path(conf_name))

class GetDefaultsCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.apache2Resources = Apache2Resources(resources)
    self.resources = resources

  def execute(self, schema_name, options):
    schema_settings = self.apache2Resources.get_apache2_settings()

    if schema_settings.has_key(schema_name):
      cfg = schema_settings[schema_name]
    else:
      schema_settings[schema_name] = {}
      cfg = schema_settings[schema_name]

    if cfg.has_key("server_name"):
      print "SERVER_NAME=" + cfg["server_name"]
    else:
      print "SERVER_NAME="

    if cfg.has_key("server_port"):
      print "SERVER_PORT=" + cfg["server_port"]
    else:
      print "SERVER_PORT="


class SetDefaultsCommand(Command):

  option_list = [make_option("--server-name","--server-name", action="store",
                             dest="server_name", help=_("The server name that will be used for this instance")),
                 make_option("--server-port","--server-port", action="store",
                             dest="server_port", help=_("The server port which this instance will be assigned to"))
                ]

  def __init__(self, resources):
    self.apache2Resources = Apache2Resources(resources)
    self.resources = resources

  def execute(self, schema_name, options):
    schema_settings = self.apache2Resources.get_apache2_settings()

    if schema_settings.has_key(schema_name):
      cfg = schema_settings[schema_name]
    else:
      schema_settings[schema_name] = {}
      cfg = schema_settings[schema_name]

    if options.server_name != None:
      cfg["server_name"] = options.server_name

    if options.server_port != None:
      cfg["server_port"] = options.server_port

    self.apache2Resources.save_apache2_settings(schema_settings)

class ListTypesCommand(Command):

  def __init__(self, resources):
    self.apache2Resources = Apache2Resources(resources)
    self.resources = resources

  def execute(self):
    for subdir, dirs, files in os.walk(self.apache2Resources.TEMPLATES_PATH):
      for template in files:
        print("apache2 " + template.replace(".vhost", "")); # TODO

