# -*- coding: utf-8 -*-

#...............................licence...........................................
#
#     (C) Copyright 2008 Telefonica Investigacion y Desarrollo
#     S.A.Unipersonal (Telefonica I+D)
#
#     This file is part of Morfeo EzWeb Platform.
#
#     Morfeo EzWeb Platform is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Morfeo EzWeb Platform is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with Morfeo EzWeb Platform.  If not, see <http://www.gnu.org/licenses/>.
#
#     Info about members and contributors of the MORFEO project
#     is available at
#
#     http://morfeo-project.org
#
#...............................licence...........................................#


#

import sys
import os
import grp
import shutil

import string
from random import Random

import gettext
from gettext import gettext as _

from admintools.common import Template, Command, EzWebAdminToolResources
from optparse import OptionParser, make_option
from configobj import ConfigObj


class LighttpdResources:

  TEMPLATES_PATH           = "/etc/ezweb-platform/lighttpd-templates/"
  AVAILABLE_SITE_BASE_PATH = "/etc/lighttpd/conf-available/"
  ENABLED_SITE_BASE_PATH   = "/etc/lighttpd/conf-enabled/"
  DEFAULT_LOG_BASE_PATH    = "/var/log/lighttpd/"

  def __init__(self, resources):
    self.resources = resources

  def get_available_link_path(self, conf_name):
    return self.AVAILABLE_SITE_BASE_PATH + "11-ezweb-platform-" + conf_name + ".conf"

  def get_enabled_link_path(self, conf_name):
    return self.ENABLED_SITE_BASE_PATH + "11-ezweb-platform-" + conf_name + ".conf"

  def get_vhost_template(self, connection_type):
    return self.TEMPLATES_PATH + connection_type + ".vhost"

  def get_vhost_path(self, conf_name):
    return self.resources.SITE_CONFIG_BASE_PATH + conf_name + "/lighttpd.vhost"

  def get_log_path(self, conf_name):
    return self.DEFAULT_LOG_BASE_PATH + "ezweb-platform-" + conf_name

  def get_default_admin_email(self, cfg):
    return "webmaster@localhost"

  def get_lighttpd_settings(self):
    filename = self.resources.CONFIG_BASE_PATH + "lighttpd.conf"

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    if not cfg.has_key("default"):
      cfg["default"] = {}

    if not isinstance(cfg['default'], dict):
      raise Exception() # TODO

    return cfg


  def save_lighttpd_settings(self, cfg, backup = False):
    if backup and os.path.exists(cfg.filename):
      self.resources.printMsg("Backing up \"%s\"... " % cfg.filename)
      shutil.copyfile(cfg.filename, cfg.filename + "~")
      self.resources.printlnMsgNP("Done")

    cfg.initial_comment  = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    self.resources.printMsg("Saving EzWeb Lighttpd settings (" + cfg.filename + ")... ")
    cfg.write()
    os.chmod(cfg.filename, 0600)
    self.resources.printlnMsg("Done")

  def update_vhost(self, cfg, backup):
    conf_name = cfg.get('name')
    connection_type = cfg.get('server', 'connection_type')
    templatepath = self.get_vhost_template(connection_type)
    try:
      templatefile = open(templatepath, "r")
    except IOError, e:
      if e.errno == 2:
        self.resources.printlnMsg("Unknow connection method \"%s\". May be you need to install support for it." % connection_type)
        sys.exit(1)
      else:
        raise e

    template = templatefile.read()
    templatefile.close()
    template = Template(template)

    # Fill the template

    template.replace("CONF_NAME", conf_name)
    template.replace("DOCUMENT_ROOT", cfg.get('server', 'document_root'))
    template.replace("DJANGO_SHARED_DATA", self.resources.get_django_shared_data_path())

    template.replace("SERVER_NAME", cfg.get('server', 'name'))
    template.replace("PORT", ":" + cfg.get('server', 'port')) # TODO read config to know whether to use ports
    template.replace("SERVER_ADMIN_EMAIL", cfg.get('server', 'admin_user_email'))
    template.replace("LOG_BASE_PATH", self.get_log_path(conf_name))

    filepath = self.get_vhost_path(conf_name)
    if backup and os.path.exists(filepath):
      self.resources.printMsg("Backing up \"%s\"... " % filepath)
      shutil.copyfile(filepath, filepath + "~")
      self.resources.printlnMsgNP("Done")

    self.resources.printMsg("Updating lighttpd vhost (%s)... " % filepath)
    template.save(filepath)
    self.resources.printlnMsg("Done")

class FillConfigCommand(Command):
  option_list = []

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, site_cfg):
    schema = site_cfg.getDefault('', 'server', 'schema')
    if schema == '':
      site_cfg.set("default", 'server', 'schema')
      schema = "default"

    lighttpd_settings = self.lighttpdResources.get_lighttpd_settings()

    if lighttpd_settings.has_key(schema):
      schema = lighttpd_settings[schema]
    else:
      schema = {}

    # Server name
    if site_cfg.getDefault('', 'server', 'name') == "":
      if schema.has_key('server_name') and schema['server_name'] != "":
        site_cfg.set(schema['server_name'], 'server', 'name')
      else:
        site_cfg.set("localhost", 'server', 'name')

    # Server port
    if site_cfg.getDefault('', 'server', 'port') == "":
      if schema.has_key('server_port') and schema['server_port'] != "":
        site_cfg.set(schema['server_port'], 'server', 'port')
      else:
        site_cfg.set("8000", 'server', 'port')

    # Admin user email
    if site_cfg.getDefault('', 'server', 'admin_user_email') == "":
      site_cfg.set(self.resources.get_default_admin_email(site_cfg), 'server', 'admin_user_email')

class UpdateCommand(Command):

  option_list = [make_option("--server-name", action="store",
                             dest="server_name", help=_("Try to run a dist-upgrade")),
                 make_option("--server-port", action="store",
                             dest="server_port", help=_("Try to run a dist-upgrade")),
                 make_option("--document-root", action="store",
                             dest="document_root", help=_("Try to run a dist-upgrade")),
                ]

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, site_cfg, options):

    if options.document_root != None:
      site_cfg.setAndUpdate(options.document_root, 'server', 'document_root')

    if options.server_name != None:
      site_cfg.setAndUpdate(options.server_name, 'server', 'name')

    if options.server_port != None:
      site_cfg.setAndUpdate(options.server_port, 'server', 'port')

class ApplyCommand(Command):
  option_list = []

  def __init__(self, resources):
    self.resources = resources

  def execute(self, options):
    ret = os.system("lighttpd -t -f /etc/lighttpd/lighttpd.conf &>/dev/null")
    if ret == 0:
      os.system("invoke-rc.d lighttpd force-reload")
      self.resources.printlnMsg()
    else:
      self.resources.printlnMsg("Your lighttpd configuration is broken, so we're not restarting it for you.")

class ProcessCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, options, site_cfg, settings_template):
    conf_name = site_cfg.get('name')

    self.lighttpdResources.update_vhost(site_cfg, options.backup)

    # Creating document root
    self.resources.makedirs(site_cfg.get('server', 'document_root'))

    # Creating log path and files
    log_path = self.lighttpdResources.get_log_path(conf_name)
    self.resources.makedirs(log_path)

    www_group = grp.getgrnam("www-data").gr_gid
    filepath = log_path + "/error.log"
    file = open(filepath, "a")
    file.close()
    os.chown(filepath, -1, www_group)
    os.chmod(filepath, 0660)

    filepath = log_path + "/access.log"
    file = open(filepath, "a")
    file.close()
    os.chown(filepath, -1, www_group)
    os.chmod(filepath, 0660)

    # vhost links
    self.resources.link(self.lighttpdResources.get_vhost_path(conf_name),
                        self.lighttpdResources.get_available_link_path(conf_name))
    self.resources.link(self.lighttpdResources.get_available_link_path(conf_name),
                        self.lighttpdResources.get_enabled_link_path(conf_name))

class PurgeCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, site_cfg, options):
    conf_name = site_cfg['name']
    filepath = self.lighttpdResources.get_vhost_path(conf_name)
    try:
      os.remove(filepath)
    except:
      pass

    # unlink vhost files
    self.resources.unlink(self.lighttpdResources.get_vhost_path(conf_name),
                          self.lighttpdResources.get_available_link_path(conf_name))
    self.resources.unlink(self.lighttpdResources.get_available_link_path(conf_name),
                          self.lighttpdResources.get_enabled_link_path(conf_name))


class GetDefaultsCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, schema_name, options):
    schema_settings = self.lighttpdResources.get_lighttpd_settings()

    if schema_settings.has_key(schema_name):
      cfg = schema_settings[schema_name]
    else:
      schema_settings[schema_name] = {}
      cfg = schema_settings[schema_name]

    if cfg.has_key("server_name"):
      print "SERVER_NAME=" + cfg["server_name"]
    else:
      print "SERVER_NAME="

    if cfg.has_key("server_port"):
      print "SERVER_PORT=" + cfg["server_port"]
    else:
      print "SERVER_PORT="


class SetDefaultsCommand(Command):

  option_list = [make_option("--server-name", action="store",
                             dest="server_name", help=_("Try to run a dist-upgrade")),
                 make_option("--server-port", action="store",
                             dest="server_port", help=_("Try to run a dist-upgrade"))
                ]

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, schema_name, options):
    schema_settings = self.lighttpdResources.get_lighttpd_settings()

    if schema_settings.has_key(schema_name):
      cfg = schema_settings[schema_name]
    else:
      schema_settings[schema_name] = {}
      cfg = schema_settings[schema_name]

    if options.server_name != None:
      cfg["server_name"] = options.server_name

    if options.server_port != None:
      cfg["server_port"] = options.server_port

    self.lighttpdResources.save_lighttpd_settings(schema_settings)


class ListTypesCommand(Command):

  def __init__(self, resources):
    self.lighttpdResources = LighttpdResources(resources)
    self.resources = resources

  def execute(self, show_server):
    if show_server:
      prefix = "lighttpd "
    else:
      prefix = ""

    for subdir, dirs, files in os.walk(self.lighttpdResources.TEMPLATES_PATH):
      for template in files:
        print(prefix + template.replace(".vhost", "")); # TODO
