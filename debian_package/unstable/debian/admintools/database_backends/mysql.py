# -*- coding: utf-8 -*-

#...............................licence...........................................
#
#     (C) Copyright 2008 Telefonica Investigacion y Desarrollo
#     S.A.Unipersonal (Telefonica I+D)
#
#     This file is part of Morfeo EzWeb Platform.
#
#     Morfeo EzWeb Platform is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Morfeo EzWeb Platform is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with Morfeo EzWeb Platform.  If not, see <http://www.gnu.org/licenses/>.
#
#     Info about members and contributors of the MORFEO project
#     is available at
#
#     http://morfeo-project.org
#
#...............................licence...........................................#


#

import sys
import os
import shutil

import string
from random import Random

import gettext
from gettext import gettext as _

import MySQLdb
import warnings
from optparse import OptionParser, make_option
from configobj import ConfigObj
from admintools.common import Command, EzWebAdminToolResources, ConfigCopy

class MySQLResources:
  def __init__(self, resources):
    self.resources = resources

  def get_ezweb_connection(self, cfg):
    conn = MySQLdb.connect (host   = cfg['host'],
                            user   = cfg['admin_user'],
                            passwd = cfg['admin_pass'],
                            db     = 'mysql')
    return conn

  def connect(self, cfg):
    conn = MySQLdb.connect (host   = cfg['host'],
                            user   = cfg['user'],
                            passwd = cfg['pass'],
                            db     = cfg['name'])
    return conn

  def get_mysql_settings_path(self):
    return self.resources.CONFIG_BASE_PATH + "mysql.conf"

  def get_mysql_settings(self):
    filename = self.get_mysql_settings_path()

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    cfg.initial_comment  = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    return cfg

  def save_mysql_settings(self, cfg, backup):
    if backup and os.path.exists(cfg.filename):
      self.resources.printMsg("Backing up \"%s\"... " % cfg.filename)
      shutil.copyfile(cfg.filename, cfg.filename + "~")
      self.resources.printlnMsgNP("Done")

    self.resources.printMsg("Saving EzWeb MySQL settings (%s)... " % cfg.filename)
    cfg.write()
    os.chmod(cfg.filename, 0600)
    self.resources.printlnMsgNP("Done")


  def fill_settings(self, site_cfg):
    site_cfg = ConfigCopy(site_cfg)
    conf_name = site_cfg["name"]

    schema = site_cfg.getDefault('', 'database', 'schema')
    if schema == '':
      site_cfg.set("default", 'database', 'schema')
      schema = "default"

    mysql_settings = self.get_mysql_settings()
    if mysql_settings.has_key(schema):
      schema = mysql_settings[schema]
    else:
      schema = {}

    # Database host
    host = site_cfg.getDefault('', 'database', 'host')
    if host == '':
      if schema.has_key('server_host'):
        site_cfg.set(schema['server_host'], 'database', 'host')
      else:
        site_cfg.set("localhost", 'database', 'host')

    # Database admin user
    admin_user = site_cfg.getDefault('', 'database', 'admin_user')
    if admin_user == '':
      if schema.has_key('admin_user'):
        site_cfg.set(schema['admin_user'], 'database', 'admin_user')

    admin_pass = site_cfg.getDefault('', 'database', 'admin_pass')
    if admin_pass == '':
      if schema.has_key('admin_pass'):
        site_cfg.set(schema['admin_pass'], 'database', 'admin_pass')

    # Database user
    if not site_cfg['database'].has_key("user"):
      site_cfg.setAndUpdate("ezweb-" + conf_name, 'database', 'user')

    if not site_cfg['database'].has_key("name"):
      site_cfg.setAndUpdate("ezweb-" + conf_name, 'database', 'name')

    if not site_cfg['database'].has_key("pass"):
      site_cfg.setAndUpdate(''.join(Random().sample(string.letters+string.digits, 12)), 'database', 'pass')

    return site_cfg

  def update_settings_py(self, template, site_cfg):

    # Fill the template
    template.replace("DATABASE_ENGINE", "mysql")
    template.replace("DATABASE_USER", site_cfg['database']['user'])
    if site_cfg['database'].has_key('pass'):
      template.replace("DATABASE_PASS", site_cfg['database']['pass'])
    else:
      template.replace("DATABASE_PASS", "")

    template.replace("DATABASE_NAME", site_cfg['database']['name'])
    template.replace("DATABASE_OPTIONS", "'init_command': 'SET storage_engine=InnoDB'")

    if site_cfg['database'].has_key('host'):
      template.replace("DATABASE_HOST", site_cfg['database']['host'])
    else:
      template.replace("DATABASE_HOST", "")

    if site_cfg['database'].has_key('port'):
      template.replace("DATABASE_PORT", site_cfg['database']['port'])
    else:
      template.replace("DATABASE_PORT", "")



class UpdateCommand(Command):
  option_list = [make_option("--database-user", action="store",
                             dest="database_user", help=_("User to use to connect to the database")),
                 make_option("--database-name", action="store",
                             dest="database_name", help=_("Name of the database to use")),
                 make_option("--database-pass", action="store",
                             dest="database_pass", help=_("Password to use to connect to the database server")),
                 make_option("--database-host", action="store",
                             dest="database_host", help=_("Address of the database server"))
                ]

  def __init__(self, resources):
    self.mysqlResources = MySQLResources(resources)
    self.resources = resources

  def execute(self, site_cfg, options):

    database_cfg = site_cfg['database']
    if options.database_host != None:
      database_cfg['host'] = options.database_host

    if options.database_name != None:
      database_cfg['name'] = options.database_name

    if options.database_user != None:
      database_cfg['user'] = options.database_user

    if options.database_pass != None:
      database_cfg['pass'] = options.database_pass



class ProcessCommand(Command):

  def __init__(self, resources):
    self.mysqlResources = MySQLResources(resources)
    self.resources = resources

  def execute(self, options, site_cfg, settings_template):

    site_cfg = self.mysqlResources.fill_settings(site_cfg)
    cfg = site_cfg['database']

    self.mysqlResources.update_settings_py(settings_template, site_cfg)

    conn = self.mysqlResources.get_ezweb_connection(cfg)
    cursor = conn.cursor()

    cursor.execute("SELECT 1 FROM `user` where `user` = '" + cfg['user'] + "';")
    if cursor.rowcount == 0:
      self.resources.printMsg("User %s doesn't exists ... " % cfg['user'])
      cursor.execute("CREATE USER '%s'@'%s' IDENTIFIED BY '%s';" % (cfg['user'], "localhost", cfg['pass']))
      self.resources.printlnMsgNP("created.")

    warnings.filterwarnings("ignore", "Can't create database .* database exists")
    self.resources.printlnMsg("Ensuring database existence (%s)..." % cfg['name'])
    cursor.execute("CREATE DATABASE IF NOT EXISTS `%s`;" % cfg['name'])
    self.resources.printlnMsg("Ensuring enough privileges to the user \"%s\"." % cfg['user'])
    cursor.execute("GRANT ALL PRIVILEGES ON `%s`.* TO '%s'@'localhost' IDENTIFIED BY '%s';" % (cfg['name'], cfg['user'], cfg['pass']))


class GetDefaultsCommand(Command):
  option_list = []

  def __init__(self, resources):
    self.mysqlResources = MySQLResources(resources)

  def execute(self, schema_name, options):
    schema_settings = self.mysqlResources.get_mysql_settings()

    if schema_settings.has_key(schema_name):
      cfg = schema_settings[schema_name]
    else:
      cfg = {}

    if cfg.has_key("server_host"):
      print "SERVER_HOST=" + cfg["server_host"]
    else:
      print "SERVER_HOST="

    if cfg.has_key("admin_user"):
      print "ADMIN_USER=" + cfg["admin_user"]
    else:
      print "ADMIN_USER="

    if cfg.has_key("admin_pass"):
      print "ADMIN_PASS=" + cfg["admin_pass"]
    else:
      print "ADMIN_PASS="



class SetDefaultsCommand(Command):
  option_list = [make_option("--database-host", action="store",
                             dest="database_host", help=_("Address of the server where the database is hosted")),
                 make_option("--admin-user", action="store",
                             dest="admin_user", help=_("User to use for managing the MySQL databases")),
                 make_option("--admin-pass", action="store",
                             dest="admin_pass", help=_("Password associated to the admin user")),
                ]

  def __init__(self, resources):
    self.mysqlResources = MySQLResources(resources)

  def execute(self, schema_name, options):
    schema_settings = self.mysqlResources.get_mysql_settings()

    if schema_settings.has_key(schema_name):
      cfg = schema_settings[schema_name]
    else:
      schema_settings[schema_name] = {}
      cfg = schema_settings[schema_name]

    if options.database_host != None:
      cfg["server_host"] = options.database_host

    if options.admin_user != None:
      cfg["admin_user"] = options.admin_user

    if options.admin_pass != None:
      cfg["admin_pass"] = options.admin_pass

    self.mysqlResources.save_mysql_settings(schema_settings, options.backup)


class PurgeCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.resources = resources
    self.mysqlResources = MySQLResources(resources)

  def execute(self, site_cfg, options):
    site_cfg = self.mysqlResources.fill_settings(site_cfg)
    cfg = site_cfg['database']
    conn = self.mysqlResources.get_ezweb_connection(cfg)

    cursor = conn.cursor()
    warnings.filterwarnings("ignore", "Can't drop database .* database doesn't exist")
    self.resources.printMsg("Droping database \"" + cfg['name'] + "\"... ")
    cursor.execute("DROP DATABASE IF EXISTS `" + cfg['name'] + "`;")
    self.resources.printlnMsgNP("Done")

    cursor.execute("SELECT 1 FROM `user` where `User` = '%s' AND `Host` = '%s';" % (cfg['user'], "localhost"))
    if cursor.rowcount == 1:
      self.resources.printMsg("Droping user \"" + cfg['user'] + "\"... ")
      cursor.execute("DROP USER '%s'@'%s';" % (cfg['user'], "localhost"))
      self.resources.printlnMsgNP("Done")

class CleanCommand(Command):

  option_list = []

  def __init__(self, resources):
    self.mysqlResources = MySQLResources(resources)

  def execute(self, site_cfg, options):
    cfg = self.mysqlResources.fill_settings(site_cfg)
    cfg = cfg['database']
    conn = self.mysqlResources.get_ezweb_connection(cfg)
    cursor = conn.cursor()
    warnings.filterwarnings("ignore", "Can't drop database .* database doesn't exist")
    cursor.execute("DROP DATABASE IF EXISTS `" + cfg['name'] + "`;")
    cursor.execute("CREATE DATABASE `" + cfg['name'] + "`;")

