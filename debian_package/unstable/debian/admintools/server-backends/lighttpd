#!/usr/bin/python

import sys
import os
import grp

import string
from random import Random

import gettext
from gettext import gettext as _

from optparse import OptionParser
from configobj import ConfigObj


class LighttpdEzwebAdminTool:

  TEMPLATES_PATH           = "/etc/ezweb-platform/lighttpd-templates/"
  AVAILABLE_SITE_BASE_PATH = "/etc/lighttpd/conf-available/"
  ENABLED_SITE_BASE_PATH   = "/etc/lighttpd/conf-enabled/"
  DEFAULT_LOG_BASE_PATH    = "/var/log/lighttpd/"

  def get_available_link_path(self, conf_name):
    return self.AVAILABLE_SITE_BASE_PATH + "11-ezweb-platform-" + conf_name + ".conf"

  def get_enabled_link_path(self, conf_name):
    return self.ENABLED_SITE_BASE_PATH + "11-ezweb-platform-" + conf_name + ".conf"

  def get_vhost_template(self, connection_type):
    return self.TEMPLATES_PATH + connection_type + ".vhost"

  def get_vhost_path(self, conf_name):
    return self.resources.SITE_CONFIG_BASE_PATH + conf_name + "/lighttpd.vhost"

  def get_log_path(self, conf_name):
    return self.DEFAULT_LOG_BASE_PATH + "ezweb-platform-" + conf_name

  def get_default_admin_email(self, cfg):
    return "webmaster@localhost"

  def get_lighttpd_settings(self):
    filename = self.resources.CONFIG_BASE_PATH + "lighttpd.conf"

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    if not cfg.has_key("default"):
      cfg["default"] = {}

    if not isinstance(cfg['default'], dict):
      raise Exception() # TODO

    return cfg


  def save_lighttpd_settings(self, cfg, backup = False):
    if backup and os.path.exists(cfg.filename):
      sys.stderr.write("    Backing up \"" + cfg.filename + "\"... ")
      os.rename(cfg.filename, cfg.filename + "~")
      sys.stderr.write("Done\n")

    cfg.initial_comment  = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    sys.stderr.write("  Saving EzWeb Lighttpd settings (" + cfg.filename + ")... ")
    cfg.write()
    os.chmod(cfg.filename, 0600)
    sys.stderr.write("Done\n")

  def update_vhost(self, cfg):
    templatepath = self.get_vhost_template(cfg['server']['connection_type'])
    try:
      templatefile = open(templatepath, "r")
    except IOError, e:
      if e.errno == 2:
        sys.stderr.write("    Unknow connection method \"" + cfg['server']['connection_type'] + "\". May be you need to install support for it.\n")
        sys.exit(1)
      else:
        raise e

    template = templatefile.read()
    templatefile.close()

    lighttpd_settings = self.get_lighttpd_settings()
    perfil_cfg = lighttpd_settings['default']
    server_cfg = cfg['server']

    # Fill the template
    template = template.replace("@CONF_NAME@", cfg['name'])
    template = template.replace("@DOCUMENT_ROOT@", server_cfg['document_root'])

    if server_cfg.has_key('server_name') and server_cfg['server_name'] != "":
      servername = server_cfg['server_name']
    elif perfil_cfg.has_key('server_name') and perfil_cfg['server_name'] != "":
      servername = perfil_cfg['server_name']
    else:
      servername = "localhost"

    template = template.replace("@SERVER_NAME@", servername)

    if server_cfg.has_key('admin_user_email') and server_cfg['admin_user_email']:
      template = template.replace("@SERVER_ADMIN_EMAIL@", server_cfg['admin_user_email'])
    else:
      template = template.replace("@SERVER_ADMIN_EMAIL@", self.get_default_admin_email(cfg))

    template = template.replace("@LOG_BASE_PATH@", self.get_log_path(cfg['name']))

    filepath = self.get_vhost_path(cfg['name'])
    sys.stderr.write("    Updating lighttpd vhost (" + filepath + ")... ")
    file = open(filepath, "w")
    file.write(template)
    file.close()
    sys.stderr.write("Done\n")

  def update(self, cfg, config_changed):
    if not cfg['server'].has_key('document_root') or cfg['server']['document_root'] == "":
      newDocumentRoot = self.resources.get_default_document_root(cfg['name'])
      sys.stderr.write("    Assigning \"" + newDocumentRoot + "\" as document root for \"" + cfg['name'] + "\"\n")
      cfg['server']['document_root'] = newDocumentRoot
      self.resources.makedirs(newDocumentRoot)
      config_changed = True

    if config_changed:
      self.resources.save_site_config(cfg)

    self.update_vhost(cfg)

    log_path = self.get_log_path(cfg['name'])
    self.resources.makedirs(log_path)

    www_group = grp.getgrnam("www-data").gr_gid
    filepath = log_path + "/error.log"
    file = open(filepath, "a")
    file.close()
    os.chown(filepath, -1, www_group)
    os.chmod(filepath, 0660)

    filepath = log_path + "/access.log"
    file = open(filepath, "a")
    file.close()
    os.chown(filepath, -1, www_group)
    os.chmod(filepath, 0660)

  def unlink(self, target, linkpath):
    if os.path.lexists(linkpath):
      if not os.path.islink(linkpath):
        sys.stderr.write("\n  Warning: " + linkpath + " exists, but was not created by the EzWeb admin scripts.\n")

      linkedFile = os.readlink(linkpath)
      if linkedFile != target:
        sys.stderr.write("\n  Warning: " + linkpath + " exists, but was not created by the EzWeb admin scripts.\n")

      os.unlink(linkpath)
    else:
      None

  def link(self, target, linkpath):
    if os.path.lexists(linkpath):
      if not os.path.islink(linkpath):
        sys.stderr.write("\n  Warning: " + linkpath + " exists, but was not created by the EzWeb admin scripts.\n")

      linkedFile = os.readlink(linkpath)
      if linkedFile != target:
        sys.stderr.write("\n  Warning: " + linkpath + " exists, but was not created by the EzWeb admin scripts.\n")

    else:
      os.symlink(target, linkpath)


  def __init__(self):
    self.resources = EzWebAdminToolResources()

  def execute(self):
    #  if os.getuid() > 0 or os.geteuid() > 0:
    #    print _("You must be root to run %s.") % sys.argv[0]
    #    sys.exit(1)

    parser = OptionParser()
    parser.add_option ("--no-backup","--no-backup", action="store_false",
                       dest="backup", help=_("Do not backup files before modify it."))
    parser.add_option ("--server-name","--server-name", action="store",
                       dest="server_name", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--server-port","--server-port", action="store",
                       dest="server_port", help=_("Try to run a dist-upgrade"))

    (self.options, args) = parser.parse_args()
    if self.options.backup == None:
      self.options.backup = True

    if len(args) < 1:
      parser.print_help()
      sys.exit(-1)

    action = args[0]

    if action == "update":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      cfg = self.resources.get_site_config(conf_name)
      self.update(cfg, False)

    elif action == "enable":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      cfg = self.resources.get_site_config(conf_name)

      enabled = cfg.as_bool("enabled")
      if not enabled:
        self.link(self.get_vhost_path(conf_name), self.get_available_link_path(conf_name))
        self.link(self.get_available_link_path(conf_name), self.get_enabled_link_path(conf_name))

        cfg["enabled"] = "True"
        self.update(cfg, True)

      sys.stderr.write("    \"" + conf_name + "\" EzWeb instance enabled sucessfully.\n")

    elif action == "disable":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      conf_name = args[1]
      cfg = self.resources.get_site_config(conf_name)

      enabled = cfg.as_bool("enabled")
      if enabled:
        self.unlink(self.get_available_link_path(conf_name), self.get_enabled_link_path(conf_name))

        cfg["enabled"] = "False"
        self.resources.save_site_config(cfg)

      sys.stderr.write("    \"" + conf_name + "\" EzWeb instance disabled sucessfully.\n")

    elif action == "getdefaults":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      perfil_name = args[1]
      perfil_settings = self.get_lighttpd_settings()

      if perfil_settings.has_key(perfil_name):
        cfg = perfil_settings[perfil_name]
      else:
        cfg = {}

      if cfg.has_key("server_name"):
        print "SERVER_NAME=" + cfg["server_name"]
      else:
        print "SERVER_NAME="

      if cfg.has_key("server_port"):
        print "SERVER_PORT=" + cfg["server_port"]
      else:
        print "SERVER_PORT="

    elif action == "setdefaults":
      if len(args) < 2:
        parser.print_help()
        sys.exit(-1)

      perfil_name = args[1]
      perfil_settings = self.get_lighttpd_settings()

      if perfil_settings.has_key(perfil_name):
        cfg = perfil_settings[perfil_name]
      else:
        perfil_settings[perfil_name] = {}
        cfg = perfil_settings[perfil_name]

      if self.options.server_name != None:
        cfg["server_name"] = self.options.server_name

      if self.options.server_port != None:
        cfg["server_port"] = self.options.server_port

      self.save_lighttpd_settings(perfil_settings)

    else:
      parser.print_help()


if __name__ == "__main__":
  sys.path.append("/usr/share/ezweb-platform")
  from admintools.common import EzWebAdminToolResources, EzWebInstanceNotFound

  admintool = LighttpdEzwebAdminTool()
  try:
    admintool.execute()
    #except Exception, e:
    # None #print e
  except EzWebInstanceNotFound, e:
    sys.stderr.write("  \"" + e + "\" EzWeb instance not found.\n"
                     "  Please, use '" + sys.argv[0] + " create \"" + e + "\"' before using it")

  sys.exit(0)