#!/usr/bin/python

import sys
import os

import string
from random import Random

import gettext
from gettext import gettext as _

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from optparse import OptionParser
from configobj import ConfigObj


class PostgreSQLEzWebAdminTool:

  def get_ezweb_connection(self, cfg):
    conn = psycopg2.connect (host = cfg["host"],
                             user = cfg["admin_user"],
                             password = cfg['admin_pass'])
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    return conn

  def connect(self, cfg):
    conn = psycopg2.connect (host     = cfg['host'],
                             user     = cfg['user'],
                             password = cfg['pass'],
                             database = cfg['name'])
    return conn

  def get_postgres_settings_path(self):
    return self.resources.CONFIG_BASE_PATH + "postgres.conf"

  def get_postgres_settings(self):
    filename = self.get_postgres_settings_path()

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    cfg.initial_comment  = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    return cfg

  def save_postgres_settings(self, cfg):
    if self.options.backup and os.path.exists(cfg.filename):
      os.rename(cfg.filename, cfg.filename + "~")

    cfg.write()
    os.chmod(cfg.filename, 0600)

  def set_setting(self, settings, section, setting, value):
    settings['modified'] = True
    settings[section][setting] = value
    settings['original_cfg'][section][setting] = value

  def get_settings(self, conf_name):
    settings = {}

    site_cfg = self.resources.get_site_config(conf_name)
    original_cfg = site_cfg
    site_cfg = site_cfg.dict()
    site_cfg['original_cfg'] = original_cfg


    if site_cfg['database'].has_key('perfil'):
      perfil = site_cfg['database']['perfil']
    else:
      perfil = "default"

    postgres_settings = self.get_postgres_settings()
    if postgres_settings.has_key(perfil):
      perfil = postgres_settings[perfil]
    else:
      perfil = {}

    site_cfg['modified'] = False

    # Database host
    if self.options.host != None:
      self.set_setting(site_cfg, 'database', 'host', self.options.host)
    elif not site_cfg['database'].has_key("host"):
      if perfil.has_key('server_host'):
        site_cfg['database']['host'] = perfil['server_host']
      else:
        self.set_setting(site_cfg, 'database', 'host', "localhost")

    # Database admin user
    if not site_cfg['database'].has_key("admin_user"):
      if perfil.has_key('admin_user'):
        site_cfg['database']['admin_user'] = perfil['admin_user']

    if not site_cfg['database'].has_key("admin_pass"):
      if perfil.has_key('admin_pass'):
        site_cfg['database']['admin_pass'] = perfil['admin_pass']

    # Database user
    if self.options.database_user != None:
      self.set_setting(site_cfg, 'database', 'user', self.options.database_user)
    elif not site_cfg['database'].has_key("user"):
      self.set_setting(site_cfg, 'database', 'user', "ezweb-" + conf_name)

    if self.options.database_name != None:
      self.set_setting(site_cfg, 'database', 'name', self.options.database_name)
    elif not site_cfg['database'].has_key("name"):
      self.set_setting(site_cfg, 'database', 'name', "ezweb-" + conf_name)

    if self.options.database_pass != None:
      self.set_setting(site_cfg, 'database', 'pass', self.options.database_name)
    elif not site_cfg['database'].has_key("pass"):
      self.set_setting(site_cfg, 'database', 'pass', ''.join(Random().sample(string.letters+string.digits, 12)))

    return site_cfg

  def save_settings(self, cfg):
    if cfg['modified'] == True:
      self.resources.save_site_config(cfg['original_cfg'])
      site_cfg['modified'] = False

  def update_settings_py(self, site_cfg):
    filepath = self.resources.get_settings_path(site_cfg['name'])

    templatefile = open(filepath, "r")
    template = templatefile.read()
    templatefile.close()

    # Fill the template
    template = template.replace("@DATABASE_ENGINE@", "postgresql_psycopg2")
    template = template.replace("@DATABASE_USER@", site_cfg['database']['user'])
    if site_cfg['database'].has_key('pass'):
      template = template.replace("@DATABASE_PASS@", site_cfg['database']['pass'])
    else:
      template = template.replace("@DATABASE_PASS@", "")

    template = template.replace("@DATABASE_NAME@", site_cfg['database']['name'])
    template = template.replace("@DATABASE_OPTIONS@", "")

    if site_cfg['database'].has_key('host'):
      template = template.replace("@DATABASE_HOST@", site_cfg['database']['host'])
    else:
      template = template.replace("@DATABASE_HOST@", "")

    if site_cfg['database'].has_key('port'):
      template = template.replace("@DATABASE_PORT@", site_cfg['database']['port'])
    else:
      template = template.replace("@DATABASE_PORT@", "")

    if self.options.backup and os.path.exists(filepath):
      sys.stderr.write("    Backing up \"" + filepath + "\"\n")
      os.rename(filepath, filepath + "~")

    sys.stderr.write("    Updating django settings (" + filepath + ")... ")
    file = open(filepath, "w")
    file.write(template)
    file.close()
    sys.stderr.write("Done\n")

  def drop_db_if_exists(self, cursor, settings):
    cursor.execute("SELECT 1 FROM pg_database WHERE datname='" + settings['name'] + "';")
    if cursor.rowcount == 0:
      sys.stderr.write("    Droping database \"" + settings['name'] + "\"... ")
      cursor.execute("DROP DATABASE " + settings['name'] + ";")
      sys.stderr.write("Done")

  def create_db(self, cursor, settings):
    sys.stderr.write("    Creating database \"" + settings['name'] + "\"... ")
    cursor.execute("CREATE DATABASE \"" + settings['name'] + "\" OWNER \"" + settings['user'] + "\";")
    sys.stderr.write("Done")


  def __init__(self):
    self.resources = EzWebAdminToolResources()

  def execute(self):
    parser = OptionParser()
    parser.add_option ("--database-user","--database-user", action="store",
                       dest="database_user", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--database-name","--database-name", action="store",
                       dest="database_name", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--database-pass","--database-pass", action="store",
                       dest="database_pass", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--server-host","--server-host", action="store",
                       dest="host", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--admin-user","--admin-user", action="store",
                       dest="admin_user", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--admin-pass","--admin-pass", action="store",
                       dest="admin_pass", help=_("Try to run a dist-upgrade"))
    parser.add_option ("--no-backup","--no-backup", action="store_false",
                       dest="backup", help=_("Try to run a dist-upgrade"))

    (self.options, args) = parser.parse_args()

    if len(args) < 2:
      parser.print_help()
      sys.exit(-1)

    action = args[0]
    conf_name = args[1]

    if self.options.backup == None:
      self.options.backup = True


    if action == "update":
      settings = self.get_settings(conf_name)
      cfg = settings['database']

      self.save_settings(settings)
      self.update_settings_py(settings)

      conn = self.get_ezweb_connection(cfg)
      cursor = conn.cursor()

      cursor.execute("SELECT 1 FROM pg_user WHERE usename = '" + cfg['user'] + "';")
      if cursor.rowcount == 0:
        sys.stderr.write("  User " + cfg['user'] + " doesn't exists.\n")
        cursor.execute("CREATE USER \"" + cfg['user'] + "\" PASSWORD '" + cfg['pass'] + "';")
        sys.stderr.write("  User " + cfg['user'] + " created.\n")


      cursor.execute("SELECT 1 FROM pg_database WHERE datname='" + cfg['name'] + "';")
      if cursor.rowcount == 0:
        sys.stderr.write("  Database " + cfg['name'] + " doesn't exists.\n")
        self.create_db(cursor, cfg)

    elif action == "purge":
      settings = self.get_settings(conf_name)
      cfg = settings['database']

      conn = self.get_ezweb_connection(cfg)
      cursor = conn.cursor()
      drop_db_if_exists(conn, cfg)
      sys.stderr.write("Done")

    elif action == "clear":
      settings = self.get_settings(conf_name)
      cfg = settings['database']

      conn = self.get_ezweb_connection(cfg)
      cursor = conn.cursor()
      self.drop_db_if_exists(cursor, cfg)
      self.create_db(cursor, cfg)

    elif action == "getdefaults":
      perfil_name = args[1]
      perfil_settings = self.get_postgres_settings()

      if perfil_settings.has_key(perfil_name):
        cfg = perfil_settings[perfil_name]
      else:
        cfg = {}

      if cfg.has_key("host"):
        print "SERVER_HOST=" + cfg["host"]
      else:
        print "SERVER_HOST="

      if cfg.has_key("admin_user"):
        print "ADMIN_USER=" + cfg["admin_user"]
      else:
        print "ADMIN_USER="

      if cfg.has_key("admin_pass"):
        print "ADMIN_PASS=" + cfg["admin_pass"]
      else:
        print "ADMIN_PASS="


    elif action == "setdefaults":
      perfil_name = args[1]
      perfil_settings = self.get_postgres_settings()

      if perfil_settings.has_key(perfil_name):
        cfg = perfil_settings[perfil_name]
      else:
        perfil_settings[perfil_name] = {}
        cfg = perfil_settings[perfil_name]

      if self.options.host != None:
        cfg["host"] = self.options.host

      if self.options.admin_user != None:
        cfg["admin_user"] = self.options.admin_user

      if self.options.admin_pass != None:
        cfg["admin_pass"] = self.options.admin_pass

      self.save_postgres_settings(perfil_settings)

    else:
      parser.print_help()

if __name__ == "__main__":
  sys.path.append("/usr/share/ezweb-platform")
  from admintools.common import EzWebAdminToolResources, EzWebInstanceNotFound

  admintool = PostgreSQLEzWebAdminTool()
  try:
    admintool.execute()
    #except Exception, e:
    # None #print e
  except EzWebInstanceNotFound, e:
    sys.stderr.write("  \"" + e + "\" EzWeb instance not found.\n"
                     "  Please, use '" + sys.argv[0] + " create \"" + e + "\"' before using it")

  sys.exit(0)
