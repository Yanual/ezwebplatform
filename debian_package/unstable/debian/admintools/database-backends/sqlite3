#!/usr/bin/python

import sys
import os
import grp

import string
from random import Random

import gettext
from gettext import gettext as _

import warnings
from optparse import OptionParser
from configobj import ConfigObj

class InvalidEzWebInstance(Exception):
  None

class SQLite3EzWebAdminTool:
  DB_BASE_PATH = "/var/lib/ezweb-platform/"

  def get_sqlite3_settings_path(self):
    return self.resources.CONFIG_BASE_PATH + "sqlite3.conf"

  def get_sqlite3_settings(self):
    filename = self.get_sqlite3_settings_path()

    exists = os.path.exists(filename)
    if exists:
      cfg = ConfigObj(filename, encoding="utf_8")
    else:
      cfg = ConfigObj()
      cfg.filename = filename
      cfg.encoding= "utf_8"

    cfg.initial_comment  = []
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# DO NOT EDIT THIS FILE")
    cfg.initial_comment.append("#")
    cfg.initial_comment.append("# It is automatically generated by the EzWeb admin tools")
    cfg.initial_comment.append("")

    return cfg

  def save_sqlite3_settings(self, cfg):
    if self.options.backup and os.path.exists(cfg.filename):
      os.rename(cfg.filename, cfg.filename + "~")

    cfg.write()
    os.chmod(cfg.filename, 0600)


  def get_settings(self, conf_name):
    settings = {}

    site_cfg = self.resources.get_site_config(conf_name)

    if site_cfg['database'].has_key('database_type') and site_cfg['database']['database_type'] != "sqlite3":
      raise InvalidEzWebInstance()

    if site_cfg['database'].has_key('perfil'):
      perfil = site_cfg['database']['perfil']
    else:
      perfil = "default"

    sqlite3_settings = self.get_sqlite3_settings()
    if sqlite3_settings.has_key(perfil):
      perfil = sqlite3_settings[perfil]
    else:
      perfil = {}

    # Database path
    if self.options.name != None:
      site_cfg['database']['name'] = self.options.name
    elif not site_cfg['database'].has_key("name"):
      site_cfg['database']['name'] = self.DB_BASE_PATH + conf_name + ".sqlite3"

    return site_cfg

  def update_settings_py(self, site_cfg):
    filepath = self.resources.get_settings_path(site_cfg['name'])

    templatefile = open(filepath, "r")
    template = templatefile.read()
    templatefile.close()

    # Fill the template
    template = template.replace("@DATABASE_ENGINE@", "sqlite3")
    template = template.replace("@DATABASE_USER@", '')
    template = template.replace("@DATABASE_PASS@", '')
    template = template.replace("@DATABASE_NAME@", site_cfg['database']['name'])
    template = template.replace("@DATABASE_OPTIONS@", '')
    template = template.replace("@DATABASE_HOST@", '')
    template = template.replace("@DATABASE_PORT@", '')

    if self.options.backup and os.path.exists(filepath):
      sys.stderr.write("    Backing up \"" + filepath + "\"\n")
      os.rename(filepath, filepath + "~")

    sys.stderr.write("    Updating django settings (" + filepath + ")... ")
    file = open(filepath, "w")
    file.write(template)
    file.close()
    sys.stderr.write("Done\n")

  def __init__(self):
    self.resources = EzWebAdminToolResources()

  def execute(self):
    parser = OptionParser()
    parser.add_option ("--path","--path", action="store",
                       dest="name", help=_("Path to the sqlite database file."))
    parser.add_option ("--no-backup","--no-backup", action="store_false",
                       dest="backup", help=_("Do not backup files before modify it."))

    (self.options, args) = parser.parse_args()

    if len(args) < 2:
      parser.print_help()
      sys.exit(-1)

    action = args[0]
    conf_name = args[1]

    if self.options.backup == None:
      self.options.backup = True


    if action == "update":
      settings = self.get_settings(conf_name)
      cfg = settings['database']

      db_file = cfg['name']
      f = open(db_file, "w")
      f.close()
      os.chown(cfg['name'], -1, grp.getgrnam("www-data").gr_gid)
      os.chmod(cfg['name'], 0660)
      self.update_settings_py(settings)

    elif action == "purge":
      settings = self.get_settings(conf_name)
      cfg = settings['database']

      if os.path.exists(cfg['name']):
        sys.stderr.write("    Removing database file (" + cfg['name'] + ")... ")
        os.unlink(cfg['name'])
        sys.stderr.write("Done")

      sys.stderr.write("    Database for \"" + conf_name + "\" purged successfully.\n")

    elif action == "clear":
      settings = self.get_settings(conf_name)
      cfg = settings['database']

      f = open(cfg['name'], "w")
      f.close()
      os.chown(cfg['name'], -1, grp.getgrnam("www-data").gr_gid)
      os.chmod(cfg['name'], 0660)

    elif action == "getdefaults":
      perfil_name = args[1]
      perfil_settings = self.get_sqlite3_settings()

      if perfil_settings.has_key(perfil_name):
        cfg = perfil_settings[perfil_name]
      else:
        cfg = {}

      if cfg.has_key("host"):
        print "SERVER_HOST=" + cfg["host"]
      else:
        print "SERVER_HOST="

      if cfg.has_key("admin_user"):
        print "ADMIN_USER=" + cfg["admin_user"]
      else:
        print "ADMIN_USER="

      if cfg.has_key("admin_pass"):
        print "ADMIN_PASS=" + cfg["admin_pass"]
      else:
        print "ADMIN_PASS="


    elif action == "setdefaults":
      perfil_name = args[1]
      perfil_settings = self.get_sqlite3_settings()

      if perfil_settings.has_key(perfil_name):
        cfg = perfil_settings[perfil_name]
      else:
        perfil_settings[perfil_name] = {}
        cfg = perfil_settings[perfil_name]

      if self.options.host != None:
        cfg["host"] = self.options.host

      if self.options.admin_user != None:
        cfg["admin_user"] = self.options.admin_user

      if self.options.admin_pass != None:
        cfg["admin_pass"] = self.options.admin_pass

      self.save_sqlite3_settings(perfil_settings)

    else:
      parser.print_help()

if __name__ == "__main__":
  sys.path.append("/usr/share/ezweb-platform")
  from admintools.common import EzWebAdminToolResources, EzWebInstanceNotFound

  admintool = SQLite3EzWebAdminTool()
  try:
    admintool.execute()
    #except Exception, e:
    # None #print e
  except EzWebInstanceNotFound, e:
    sys.stderr.write("  \"" + e + "\" EzWeb instance not found.\n"
                     "  Please, use '" + sys.argv[0] + " create \"" + e + "\"' before using it")

  sys.exit(0)
