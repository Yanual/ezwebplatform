<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0">
    <object pk="username" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">ECTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="width" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="height" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="xPosition" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="yPosition" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="language" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">ECTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="lockStatus" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="widthInPixels" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="heightInPixels" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">GCTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="orientation" model="context.concept">
        <field type="CharField" name="source">PLAT</field>
        <field type="CharField" name="type">ECTX</field>
        <field type="CharField" name="adaptor"><None></None></field>
    </object>
    <object pk="1" model="context.conceptname">
        <field type="CharField" name="name">user_name</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">username</field>
    </object>
    <object pk="2" model="context.conceptname">
        <field type="CharField" name="name">width</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">width</field>
    </object>
    <object pk="3" model="context.conceptname">
        <field type="CharField" name="name">height</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">height</field>
    </object>
    <object pk="4" model="context.conceptname">
        <field type="CharField" name="name">xPosition</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">xPosition</field>
    </object>
    <object pk="5" model="context.conceptname">
        <field type="CharField" name="name">yPosition</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">yPosition</field>
    </object>
    <object pk="6" model="context.conceptname">
        <field type="CharField" name="name">language</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">language</field>
    </object>
    <object pk="7" model="context.conceptname">
        <field type="CharField" name="name">lockStatus</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">lockStatus</field>
    </object>
    <object pk="8" model="context.conceptname">
        <field type="CharField" name="name">widthInPixels</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">widthInPixels</field>
    </object>
    <object pk="9" model="context.conceptname">
        <field type="CharField" name="name">heightInPixels</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">heightInPixels</field>
    </object>
    <object pk="10" model="context.conceptname">
        <field type="CharField" name="name">orientation</field>
        <field to="context.concept" name="concept" rel="ManyToOneRel">orientation</field>
    </object>
	<object pk="1" model="connectable.filter">
        <field type="CharField" name="name">concat</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        
        		var result;
        		if(params["stringBefore"])
	        		result = params["stringBefore"].concat(channelValue);
	        	else
	        		result = channelValue;
	        		
	        	if(params["stringAfter"])
					result = result.concat(params["stringAfter"]);
	
				return result;

        }
        ]]>
        </field>
        <field type="CharField" name="label">Concat [String, String]</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">Concatenates the value of the channel with 
the value of the strings given by the user. The user can give both
a "Before" string and an "After" string to be concatenated before or after the value of the channel.

e.g. 
Channel value: 'aaa'
Before (given by user):
After (given by user): 'bbb'
Returns: 'aaabbb'</field>
		<field type="TextField" name="params">[{"name": "stringBefore", "type": "S", "index": 0, "label": "Before"}, {"name": "stringAfter", "type": "S", "index": 1, "label": "After"}]</field>
	</object>
    <object pk="2" model="connectable.filter">
        <field type="CharField" name="name">encodeURIComponent</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	return encodeURIComponent(channelValue);
        }
        ]]>
        </field>
        <field type="CharField" name="label">Encode URI</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">Encodes the value of the channel as a valid
component of a universal resource identifier 
(URI, Uniform Resource Identifier). 

e.g. 
Channel value: 'ezweb platform'
Returns: 'ezweb%20platform'</field>
		<field type="TextField" name="params"><None></None></field>    
	</object>
    <object pk="3" model="connectable.filter">
        <field type="CharField" name="name">decodeURIComponent</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	return decodeURIComponent(channelValue);
        }
        ]]>
		</field>
        <field type="CharField" name="label">Decode URI</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">Takes the value of the channel as a universal 
resource identifier (URI, Uniform Resource 
Identifier) and returns its string version 
decoded.

e.g. 
Channel value: 'ezweb%20platform'
Returns: 'ezweb platform'</field>
		<field type="TextField" name="params"><None></None></field>    
	</object>
    <object pk="8" model="connectable.filter">
        <field type="CharField" name="name">match</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
			var result = channelValue.match(params['regexp']);
			if(result){
				return Object.toJSON(result);
			}else{
				throw new DontPropagateException("no matches");
			}
        }
        ]]>
        </field>
        <field type="CharField" name="label">Match [Regular Expresion]</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text"><![CDATA[Searchs for a specified value in the value
of the channel using <a href="http://www.regular-expressions.info/" target="_blank"> regular expressions</a>. 
Return a JSON list with the occurrences. 
If no occurrence is found the value is NOT propagated.

e.g. Looks up the characters before the first
comma  
Channel value: 'Getafe, Madrid'
Regular expresion (given by user): '/[\\w|\\s]*,/'
Returns: ['Getafe,']]]></field>
    	<field type="TextField" name="params">[{"name": "regexp", "type": "regexp", "index": 0, "required":true, "label": "Regular Expresion"}]</field>
	</object>
    <object pk="9" model="connectable.filter">
        <field type="CharField" name="name">replace</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	var newString = (params['newSubStr'])?params['newSubStr']: "";
			return channelValue.replace(params['regexp'], newString);
        }
        ]]>
        </field>
        <field type="CharField" name="label">Replace [Regular Expresion] [String]</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text"><![CDATA[Searchs for a specific value in the value
of the channel using <a href="http://www.regular-expressions.info/" target="_blank">regular expressions</a>,
and replaces it with the string given by 
the user.

e.g. Replaces the brackets with an empty 
character (removes the bracket)
Channel value: '(304)4345454'
Regular expresion (given by user): '/[\(\)]/g'
Returns: '3044345454']]></field>
		<field type="TextField" name="params">[{"name": "newSubStr", "type": "S", "index": 1, "label": "String"},{"name": "regexp", "type": "regexp", "index": 0, "required":true, "label": "Regular Expresion"}]</field>
	</object>
    <object pk="12" model="connectable.filter">
        <field type="CharField" name="name">split</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	if(params['howmany'])
        		return Object.toJSON(channelValue.split(params['separator'], params['howmany']));
        	else
				return Object.toJSON(channelValue.split(params['separator']));
        }
        ]]>
        </field>
        <field type="CharField" name="label">Split [Separator, How many]</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">Divides the value of the channel into substrings 
using the given separator, and creates an array 
containing the resulting substrings. The delimiter 
value is not returned as part of the array of 
substrings. If "How many" is given, it specifies 
how many times split should occur. Must be a numeric value.

e.g.  
Channel value: 'Internet'
Delimiter (given by user): 'e'
Returns: ["Int", "rn", "t"]</field>
		<field type="TextField" name="params">[{"name": "separator", "type": "S", "index": 0, "required": true, "label": "Separator"},{"name": "howmany", "type": "N", "index": 1, "label": "How many"}]</field>
	</object>
    <object pk="13" model="connectable.filter">
        <field type="CharField" name="name">substr</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
			if(params['length'])
				return channelValue.substr(params['start'], params['length']);
			else
				return channelValue.substr(params['start']);

        }
        ]]>
		</field>
        <field type="CharField" name="label">Substr [Start] [Length]</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">Extracts a specified number of characters 
from a string beginning at the specified 
start index.

e.g.  
Channel value: 'EzWeb'
Start index (given by user): '2'
Length (given by user): '3'
Returns: 'Web'</field>
    	<field type="TextField" name="params">[{"name": "length", "type": "N", "index": 1, "label": "Length"},{"name": "start", "type": "N", "index": 0, "required":true, "label": "Start"}]</field>
	</object>
    <object pk="16" model="connectable.filter">
        <field type="CharField" name="name">toLowerCase</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	return channelValue.toLowerCase();
        }
        ]]>
        </field>
        <field type="CharField" name="label">To Lower Case</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">Downcases all the letters of the value 
of the channel.

e.g.  
Channel value: 'EZWEB'
Returns: 'ezweb'</field>
		<field type="TextField" name="params"><None></None></field>    
	</object>
    <object pk="17" model="connectable.filter">
        <field type="CharField" name="name">toUpperCase</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	return channelValue.toUpperCase();
        }
        ]]>
		</field>
        <field type="CharField" name="label">To Upper Case</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">Capitalizes all the letters of the value 
of the channel.

e.g.  
Channel value: 'ezweb'
Returns: 'EZWEB'</field>
		<field type="TextField" name="params"><None></None></field>    
	</object>
   <object pk="18" model="connectable.filter">
        <field type="CharField" name="name">JSONParser.parse</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
        	var result;
        	if(channelValue == "")
        		result = "";
        	else
	        	result = JSONParser.parse(channelValue, params['jpExp']);
    
        	if(!result || result == "")
        		throw new DontPropagateException("not found");
        	else
        		return result;
        }
        ]]>
        </field>
        <field type="CharField" name="label">JSON Parser</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">JSON</field>
        <field type="TextField" name="help_text"><![CDATA[Find elements in JSON structures.

Visit <a href="http://forge.morfeo-project.org/wiki/index.php/Filtros_de_Canales" target="_blank">this page</a> for further information. 
]]></field>
		<field type="TextField" name="params">[{"name": "jpExp", "type": "jpath", "index": 0, "required":true, "label": "Expression"}]</field>    
	</object>
   <object pk="19" model="connectable.filter">
        <field type="CharField" name="name">Demultiplex</field>
        <field type="TextField" name="code"><![CDATA[
  function(channelValue, channel, params){
    			if (!channel._allInputsModified()){
    				throw new DontPropagateException("not all imputs have been modified");
    			}
				else{

					if (params["correspondence"]){
						//change the indexes given by the user
						var inputValues = channel._getJSONInput();
						var userIndexes = eval('('+params["correspondence"]+')');
						var newInputs = {};
						var newIndex, value = null;
						var indexes = inputValues.keys();
						for(var i=0; i < indexes.length;i++){
							value = inputValues[indexes[i]];
							newIndex = userIndexes[indexes[i]];
							if(!newIndex){
								newIndex = indexes[i];
							}
							newInputs[newIndex] = value;
						}
						return Object.toJSON(newInputs);
					}
					return channel._getJSONInput().toJSON();
				}
			}
        ]]></field>
        <field type="CharField" name="label">Demultiplex</field>
        <field type="CharField" name="nature">PATT</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">Propagates only when all the inputs have been modified.
If all the inputs are available, this filter generates a JSON structure containing the name and the value of each input.
That is, "{'name1':'value1', 'name2':'value2'}".
Optionally, you can change the indexes of the structure by giving a string like this as a parameter:
{'name1': 'new_index1','name2': 'new_index2'}</field>
        <field type="TextField" name="params">[{"name": "correspondence", "type": "S", "index": 0, "label": "Indexes"}]</field>
    </object>
       <object pk="20" model="connectable.filter">
         <field type="CharField" name="name">contains</field>
        <field type="TextField" name="code"><![CDATA[
        function(channelValue, channel, params){
			var result = channelValue.match(params['string']);
			if(result){
				return channelValue;
			}else{
				throw new DontPropagateException("no matches");
			}
        }
        ]]>
        </field>
        <field type="CharField" name="label">Contains [String]</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text"><![CDATA[Searchs for a specified value in the value
of the channel using both a string 
or <a href="http://www.regular-expressions.info/" target="_blank"> regular expressions</a>. 
If there is any occurrence, it returns the 
whole value of the channel, else, 
the value is NOT propagated.

e.g. Looks up the string 'EzWeb'  
Channel value: 'Welcome to EzWeb platform'
String (given by user): 'EzWeb'
Returns: 'Welcome to EzWeb platform']]></field>
    	<field type="TextField" name="params">[{"name": "string", "type": "S", "index": 0, "required":true, "label": "String"}]</field>
	</object>
	</django-objects>
